- name: ' Konductor | Provision UPI Infra | post-deploy-configure-oadp-migration-restore.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "process-oadp-application-restore"
    ansible_name_module: " Post Cluster Installation | Configure Cluster application backup Service | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
    - 'vars/oadp-migration.yml'
  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      block:
        - name: '{{ ansible_name_module }} | assert | the Source Cluster API URL is defined'
          ansible.builtin.assert:
            that:
              - restore_dest_cluster_console_url is defined
              - restore_dest_cluster_console_url != ''
            msg: "The Source cluster login URL is required for SA Token Retrieval"

        - name: '{{ ansible_name_module }} | assert | the Source Cluster API Token is defined'
          ansible.builtin.assert:
            that:
              - restore_dest_cluster_token is defined
              - restore_dest_cluster_token != ''
            msg: "The Source cluster login Token is required for SA Token Retrieval"
          when:
            - not skip_api_login_logout is defined or not skip_api_login_logout | bool

        - name: '{{ ansible_name_module }} | set_fact | namespacelist '
          ansible.builtin.set_fact:
            restore_dest_cluster_console_port: '6443'
          when:
            - not restore_dest_cluster_console_port is defined or restore_dest_cluster_console_port == ''

        - name: '{{ ansible_name_module }} | assert | the default_backup_name is defined'
          ansible.builtin.assert:
            that:
              - default_backup_name is defined and default_backup_name != ""
            msg: " the default_backup_name must be set and valid "

        - name: '{{ ansible_name_module }} | assert | the restore namespace is defined'
          ansible.builtin.assert:
            that:
              - oadp_restore_ns is defined and oadp_restore_ns != ""
            msg: " the oadp_restore_ns must be set and valid "

        - name: '{{ ansible_name_module }} | assert | the oadp bucket s3url is defined'
          ansible.builtin.assert:
            that:
              - oadp_s3url is defined and oadp_s3url != ""
            msg: " the oadp_s3url must be set and valid "

        - name: '{{ ansible_name_module }} | assert | the bucket name is defined'
          ansible.builtin.assert:
            that:
              - oadp_s3_bucket is defined and oadp_s3_bucket != ''
            msg: " the oadp_s3_bucket must be set to a valid S3 bucket name  "

        - name: '{{ ansible_name_module }} | assert | the bucket access key is defined'
          ansible.builtin.assert:
            that:
              - oadp_bucket_access_key is defined
              - oadp_bucket_access_key != ''
            msg: "The repository storage bucket access key is required for the Mig Storgae Repo configuration"

        - name: '{{ ansible_name_module }} | assert | the bucket access secret is defined'
          ansible.builtin.assert:
            that:
              - oadp_bucket_access_secret is defined
              - oadp_bucket_access_secret != ''
            msg: "The repository storage bucket access secret is required for the Mig Storgae Repo configuration"

        - name: '{{ ansible_name_module }} | translate cluster login info'
          when:
            - skip_api_login_logout is defined 
            - skip_api_login_logout | bool
          block:
            - name: '{{ ansible_name_module }} | set_fact | set cluster login info  '
              ansible.builtin.set_fact:
                ocp_cluster_console_url: "{{ restore_dest_cluster_console_url }}" 
                ocp_cluster_token: "{{ restore_dest_cluster_token }}" 
                ocp_cluster_console_port: "{{ restore_dest_cluster_console_port }}" 

    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve Infrastructure Name'
      ansible.builtin.command: >
        {{ openshift_cli }} get infrastructure cluster -o jsonpath='{.status.infrastructureName}{"\n"}'
      register: cluster_infra_name

    - name: '{{ ansible_name_module }} | set_fact | cluster_name '
      ansible.builtin.set_fact:
        cluster_name: "{{ cluster_infra_name.stdout }}"
      when:
        - cluster_infra_name.stdout is defined
        - cluster_infra_name.stdout != ''

    - name: '{{ ansible_name_module }} | Retrieve Infrastructure ID'
      ansible.builtin.command: >
        {{ openshift_cli }} get clusterversion version -o jsonpath='{.spec.clusterID}{"\n"}'
      register: cluster_infra_id

    - name: '{{ ansible_name_module }} | set_fact | cluster_id '
      ansible.builtin.set_fact:
        cluster_id: "{{ cluster_infra_id.stdout }}"
      when:
        - cluster_infra_id.stdout is defined
        - cluster_infra_id.stdout != ''

    - name: '{{ ansible_name_module }} | set_fact | cluster_id '
      ansible.builtin.set_fact:
        oadp_backup_ns: "{{ oadp_restore_ns }}"
      when:
        - not oadp_backup_ns is defined or oadp_backup_ns != oadp_restore_ns

    - name: '{{ ansible_name_module }} | import_tasks | Import additional MCP pause tasks'
      ansible.builtin.include_tasks: tasks/process-mcp-pausing-unpausing.yml
      when:
        - pause_mcp is defined
        - pause_mcp | bool
      vars:
        pause_mcp: 'true'
        unpause_mcp: 'false'

    - name: '{{ ansible_name_module }} | import_tasks | Import OADP Restore precheck tasks'
      ansible.builtin.import_tasks: tasks/validate-oadp-restore-precheck-info-on-dest-cluster.yml 

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP operator install check tasks'
      ansible.builtin.import_tasks: tasks/ensure-oadp-operator-is-installed.yml

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP restore config tasks'
      ansible.builtin.import_tasks: tasks/configure-oadp-restore.yml
      vars:
        add_restore: 'true'
        add_oadp_schedule: 'false'
        add_oadp_sc_change_cm: 'true'
        restore_name: "{{ default_backup_name }}-restore"

    - name: '{{ ansible_name_module }} | Process Restore Complete state cron job '
      block:
        - name: '{{ ansible_name_module }} | set_fact |  restore_complete_state_config_cm_name'
          ansible.builtin.set_fact:
            restore_complete_state_config_cm_name: 'restore-complete-state-config-configmap'
          when:
            - not restore_complete_state_config_cm_name is defined or restore_complete_state_config_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | restore_complete_state_task_cm_name'
          ansible.builtin.set_fact:
            restore_complete_state_task_cm_name: 'restore-complete-state-tasks-configmap'
          when:
            - not restore_complete_state_task_cm_name is defined or restore_complete_state_task_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | restore_complete_state_playbook_cm_name'
          ansible.builtin.set_fact:
            restore_complete_state_playbook_cm_name: 'restore-complete-state-playbook-configmap'
          when:
            - not restore_complete_state_playbook_cm_name is defined or restore_complete_state_playbook_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | restore_complete_state_task_file'
          ansible.builtin.set_fact:
            restore_complete_state_task_file: 'tasks/restore-crs-state.yml'
          when:
            - not restore_complete_state_task_file is defined or restore_complete_state_task_file == ''

        - name: '{{ ansible_name_module }} | set_fact | mcp_unpause_playbook_file'
          ansible.builtin.set_fact:
            mcp_unpause_task_file: 'tasks/process-mcp-pausing-unpausing.yml'
          when:
            - not mcp_unpause_playbook_file is defined or mcp_unpause_playbook_file == ''

        - name: '{{ ansible_name_module }} | set_fact | restore_complete_state_playbook_file'
          ansible.builtin.set_fact:
            restore_complete_state_playbook_file: 'files/restore-complete-state.yml'
          when:
            - not restore_complete_state_playbook_file is defined or restore_complete_state_playbook_file == ''

        - name: '{{ ansible_name_module }} | set_fact | staging_dir_in_pod'
          ansible.builtin.set_fact:
            staging_dir_in_pod: '/projects/files'
          when:
            - not staging_dir_in_pod is defined or staging_dir_in_pod == ''

        - name: '{{ ansible_name_module }} | set_fact | ocp_cli_path_in_pod'
          ansible.builtin.set_fact:
            ocp_cli_path_in_pod: '/usr/bin/oc'
          when:
            - not ocp_cli_path_in_pod is defined or ocp_cli_path_in_pod == ''

        - name: '{{ ansible_name_module }} | import_tasks | Import Restore complete state cronjob tasks'
          ansible.builtin.import_tasks: tasks/create-restore-complete-state-cronjob-resources.yml 
          vars:
            unpause_mcp: 'true'
            backup_name: '{{ default_backup_name }}'

