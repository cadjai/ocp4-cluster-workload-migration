kind: CronJob
apiVersion: batch/v1
metadata:
  name: backup-complete-state
  namespace: {{ oadp_restore_ns }} 
  labels:
    template: backup-complete-state-cronjob
    app.kubernetes.io/instance: backup-complete-state
spec:
  schedule: {{ backup_complete_cron_expression | d('1,31 * * * *', true) }}
  startingDeadlineSeconds: 1800
  concurrencyPolicy: Forbid
  suspend: false
  jobTemplate:
    metadata:
    spec:
      activeDeadlineSeconds: 1800
      template:
        metadata:
        spec:
          nodeSelector:
            node-role.kubernetes.io/worker: ''
          restartPolicy: Never
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          securityContext: {}
          containers:
            - resources:
                limits:
                  cpu: 1000m
                  memory: 2000Mi
                requests:
                  cpu: 200m
                  memory: 400Mi
              terminationMessagePath: /dev/termination-log
              name: backup-complete-state
              env:
                - name: OCP_CLI
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }} 
                      key: ocpCli
                - name: SKIP_API_LOGIN
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }} 
                      key: skipApiLogin 
                - name: PAUSE_MCP
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }}
                      key: pauseMCP
                - name: UNPAUSE_MCP
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }}
                      key: unpauseMCP
                - name: STAGING_DIR
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }} 
                      key: containerStagingDir
                - name: BACKUP_NS 
                  valueFrom:
                    configMapKeyRef:
                      name: {{ backup_complete_state_config_cm_name }} 
                      key: backupNS
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: backup-complete-state-tasks
                  mountPath: /projects/code/backup-state-tasks.yml
                  subPath: backup-state-tasks.yml
                - name: backup-complete-state-tasks 
                  mountPath: /projects/code/mcp-unpause-tasks.yml
                  subPath: mcp-unpause-tasks.yml
                - name: backup-complete-state-play
                  mountPath: /projects/code/process-backup-complete-state.yml
                  subPath: process-backup-complete-state.yml
              terminationMessagePolicy: File
              image: {{ backup_complete_cronjob_image | d('registry.redhat.io/devspaces/udi-rhel8-bastion:latest', true) }}
              command:
                - /usr/bin/ansible-playbook
              args:
                - '-i localhost'
                - '-e openshift_cli=$(OCP_CLI)'
                - '-e skip_api_login_logout=$(SKIP_API_LOGIN)'
                - '-e pause_mcp=$(PAUSE_MCP)'
                - '-e unpause_mcp=$(UNPAUSE_MCP)'
                - '-e staging_dir=$(STAGING_DIR)'
                - '-e oadp_backup_ns=$(BACKUP_NS)'
                - '-vvv'
                - /projects/code/process-backup-complete-state.yml
          serviceAccount: velero
          volumes:
            - name: backup-complete-state-tasks
              configMap:
                name: backup-complete-state-tasks-configmap
            - name: backup-complete-state-play
              configMap:
                name: backup-complete-state-playbook-configmap
          dnsPolicy: ClusterFirst
          tolerations:
            - operator: Exists
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
