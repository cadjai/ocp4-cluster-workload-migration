- name: ' Konductor | Provision UPI Infra | post-deploy-apply-raw-manifests-to-destination-cluster.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "apply raw manifest to restore cluster"
    ansible_name_module: " Post Cluster Installation | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
    - 'vars/oadp-migration.yml'
  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      when:
        - download_manifests_from_s3 is defined
        - download_manifests_from_s3 | bool
      block:
        - assert:
            that:
              - oadp_bucket_access_key is defined and oadp_bucket_access_key != ""
            msg: " the oadp_bucket_access_key must be set and valid "
        - assert:
            that:
              - oadp_bucket_access_secret is defined and oadp_bucket_access_secret != ""
            msg: " the oadp_bucket_access_secret must be set and valid "
        - assert:
            that:
              - oadp_s3url is defined and oadp_s3url != ""
            msg: " the oadp_s3url must be set and valid "

        - assert:
            that:
              - oadp_s3_bucket is defined and oadp_s3_bucket != ''
            msg: " the oadp_s3_bucket must be set to a valid S3 bucket name  "

    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve Infrastructure Name'
      ansible.builtin.command: >
        {{ openshift_cli }} get infrastructure cluster -o jsonpath='{.status.infrastructureName}{"\n"}'
      register: cluster_infra_name

    - name: '{{ ansible_name_module }} | set_fact | cluster_name '
      ansible.builtin.set_fact:
        cluster_name: "{{ cluster_infra_name.stdout }}"
      when:
        - cluster_infra_name.stdout is defined
        - cluster_infra_name.stdout != ''

    - name: '{{ ansible_name_module }} | Retrieve Infrastructure ID'
      ansible.builtin.command: >
        {{ openshift_cli }} get clusterversion version -o jsonpath='{.spec.clusterID}{"\n"}'
      register: cluster_infra_id

    - name: '{{ ansible_name_module }} | set_fact | cluster_id '
      ansible.builtin.set_fact:
        cluster_id: "{{ cluster_infra_id.stdout }}"
      when:
        - cluster_infra_id.stdout is defined
        - cluster_infra_id.stdout != ''

    - name: '{{ ansible_name_module }} | set_fact | backup_name '
      ansible.builtin.set_fact:
        backup_name: "{{ backup_name_prefix_strg }}{{ cluster_name }}-bg-backup-{{ ansible_date_time.iso8601_basic_short.split('T')[0] }}"
      when:
        - not backup_name is defined or not backup_name != ''
      vars:
        backup_name_prefix_strg: "{{ (backup_name_prefix + '-') if backup_name_prefix is defined and backup_name_prefix != '' else '' }}"

    - name: '{{ ansible_name_module }} | import_tasks | Import additional raw manifest processing tasks'
      ansible.builtin.import_tasks: tasks/apply-raw-manifests-to-restore-cluster.yml 

