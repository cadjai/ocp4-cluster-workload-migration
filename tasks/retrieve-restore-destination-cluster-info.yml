---
- name: '{{ ansible_name_module }} | Authenticate with the API'
  ansible.builtin.command: >
    {{ openshift_cli }} login \
      --token {{ restore_dest_cluster_token }} \
      --insecure-skip-tls-verify=true {{ restore_dest_cluster_console_url }}:{{ restore_dest_cluster_console_port | d('6443', true) }}
  when:
    - not skip_api_login_logout is defined or not skip_api_login_logout | bool

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | namespace list '
  ansible.builtin.shell: >
    {{ openshift_cli }} get project --no-headers | awk '{print $1}'
  register: namespaces_all_out

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | namespace list '
  ansible.builtin.shell: >
    {{ openshift_cli }} get project --no-headers | egrep -vi "{{ excluded_ns | join('|') }}"  | awk '{print $1}'
  when:
    - apply_ns_exlusion is defined
    - apply_ns_exlusion | bool
    - excluded_ns is defined
    - excluded_ns | length > 0
  register: namespaces_filtered_out

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all namespace list output '
  ansible.builtin.debug:
    var: namespaces_all_out
    verbosity: 2    

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all namespace count output '
  ansible.builtin.debug:
    msg: "The number of all namesapces is : {{ namespaces_all_out.stdout_lines | length }}"
    verbosity: 2

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print filtered namespace list output '
  ansible.builtin.debug:
    var: namespaces_filtered_out
    verbosity: 2
  when:
    - namespaces_filtered_out is defined
    - namespaces_filtered_out.rc is defined
    - namespaces_filtered_out.rc == 0 
    - namespaces_filtered_out.stdout is defined
    - namespaces_filtered_out.stdout != '' 

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print filtered namespace count output '
  ansible.builtin.debug:
    msg: " The number of filtered namesapces is : {{ namespaces_filtered_out.stdout_lines | length }}"
    verbosity: 2
  when:
    - namespaces_filtered_out is defined
    - namespaces_filtered_out.rc is defined
    - namespaces_filtered_out.rc == 0 
    - namespaces_filtered_out.stdout is defined
    - namespaces_filtered_out.stdout != '' 

- name: '{{ ansible_name_module }} | Retrieve cluster stats '
  block:
    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | node '
      ansible.builtin.shell: >
        {{ openshift_cli }} get nodes --no-headers | grep worker | grep -v infra | awk '{print $1}'
      register: check_worker_nodes

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 1 of 7 '
      ansible.builtin.set_fact:
        pcheck_worker_nodes: "{{ check_worker_nodes }}"
      when:
        - check_worker_nodes.stdout is defined or check_worker_nodes.stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all worker node count output '
      ansible.builtin.debug:
        msg: "The number of all worker nodes (exluding infra nodes) on the source cluster  is : {{ check_worker_nodes.stdout_lines | length }}"
        verbosity: 2

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | node taints ,labels and annotations'
      ansible.builtin.shell: >
        {{ openshift_cli }} get node {{ item }} -ojsonpath='{range .items[*]}{@.metadata.name}{@.metadata.labels}{@.metadata.annotations}{@.spec.taints}{@.status}{"\n"}'
      loop: "{{ check_worker_nodes.stdout_lines }}"
      when:
        - check_worker_nodes is defined
        - check_worker_nodes.rc is defined
        - check_worker_nodes.rc == 0
        - check_worker_nodes.stdout_lines is defined
        - check_worker_nodes.stdout_lines | length > 0
      register: check_worker_node_labels

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 2 of 7 '
      ansible.builtin.set_fact:
        pcheck_worker_node_labels: "{{ check_worker_node_labels }}"
      when:
        - check_worker_node_labels.results is defined 
        - check_worker_node_labels.results | length > 0 
        - check_worker_node_labels.results[0].stdout is defined or check_worker_node_labels.results[0].stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all worker node labels, taints and annotactions output '
      ansible.builtin.debug:
        msg: "The following is the list of configured labels, taints and annotations of all worker nodes (exluding infra nodes) on the source cluster  is \n\n : {{ check_worker_node_labels.results }}"
        verbosity: 2

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | node info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get node  {{ item }} -ojson | jq .
      loop: "{{ check_worker_nodes.stdout_lines }}"
      when:
        - check_worker_nodes is defined
        - check_worker_nodes.rc is defined
        - check_worker_nodes.rc == 0
        - check_worker_nodes.stdout_lines is defined
        - check_worker_nodes.stdout_lines | length > 0
      register: check_worker_nodes_info

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 3 of 7 '
      ansible.builtin.set_fact:
        pcheck_worker_nodes_info: "{{ check_worker_nodes_info }}"
      when:
        - check_worker_nodes_info.results is defined 
        - check_worker_nodes_info.results | length > 0 
        - check_worker_nodes_info.results[0].stdout is defined or check_worker_nodes_info.results[0].stderr

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | machineset info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get machineset --all-namespaces --no-headers | grep -v infra | grep worker | awk '{print $2 " -n " $1}'
      register: check_worker_machinesets_info

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 4 of 7 '
      ansible.builtin.set_fact:
        pcheck_worker_machinesets_info: "{{ check_worker_machinesets_info }}"
      when:
        - check_worker_machinesets_info.stdout is defined or check_worker_machinesets_info.stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all worker machineset output '
      ansible.builtin.debug:
        msg: "The current machineset on the source cluster  are \n\n : {{ check_worker_machinesets_info.stdout_lines }}"
        verbosity: 2

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | cluster autoscaler info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get clusterautoscaler default  -ojsonpath='{.spec.resourceLimits}' | jq .
      ignore_errors: yes
      register: check_cluster_autoscaler_info

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 5 of 7 '
      ansible.builtin.set_fact:
        pcheck_cluster_autoscaler_info: "{{ check_cluster_autoscaler_info }}"
      when:
        - check_cluster_autoscaler_info.stdout is defined or check_cluster_autoscaler_info.stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print cluster autoscaler resource limit output '
      ansible.builtin.debug:
        msg: "The current cluster autoscaler resource limit on the source cluster is \n\n : {{ check_cluster_autoscaler_info.stdout_lines }}"
        verbosity: 2
      when:
        - check_cluster_autoscaler_info is defined
        - check_cluster_autoscaler_info.rc is defined
        - check_cluster_autoscaler_info.rc == 0
        - check_cluster_autoscaler_info.stdout_lines is defined
        - check_cluster_autoscaler_info.stdout_lines | length > 0

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | machine autoscaler info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get machineautoscaler --all-namespaces -ojsonpath='{range .items[*]}{@.metadata}{@.spec}{@.status}' | jq .
      ignore_errors: yes
      when:
        - check_cluster_autoscaler_info is defined
        - check_cluster_autoscaler_info.rc is defined
        - check_cluster_autoscaler_info.rc == 0
        - check_cluster_autoscaler_info.stdout_lines is defined
        - check_cluster_autoscaler_info.stdout_lines | length > 0
      register: check_machine_autoscaler_info

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 6 of 7 '
      ansible.builtin.set_fact:
        pcheck_machine_autoscaler_info: "{{ check_machine_autoscaler_info }}"
      when:
        - check_machine_autoscaler_info is defined
        - check_machine_autoscaler_info.stdout is defined
        - check_machine_autoscaler_info.stdout is defined or check_machine_autoscaler_info.stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print machine autoscaler resource limit output '
      ansible.builtin.debug:
        msg: "The current cluster autoscaler resource limit on the source cluster is \n\n : {{ check_cluster_autoscaler_info.stdout_lines }}"
        verbosity: 2
      when:
        - check_machine_autoscaler_info is defined
        - check_machine_autoscaler_info.rc is defined
        - check_machine_autoscaler_info.rc == 0
        - check_machine_autoscaler_info.stdout_lines is defined
        - check_machine_autoscaler_info.stdout_lines | length > 0

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | retrieve storage classes '
      ansible.builtin.shell: >
        {{ openshift_cli }} get sc -o jsonpath="{range .items[*]}{.metadata.name}{.metadata.annotations}{.parameters}{end}" 
      register: check_storage_classes

    - name: '{{ ansible_name_module }} | set_fact | pcheck fact 7 of 7 '
      ansible.builtin.set_fact:
        pcheck_storage_classes: "{{ check_storage_classes }}"
      when:
        - check_storage_classes.stdout is defined or check_storage_classes.stderr

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print storage class output '
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ check_storage_classes.stdout_lines }}"

- name: "{{ ansible_name_module }} | Print registered vars keys"
  ansible.builtin.debug:
    var: item
  loop: "{{ hostvars['localhost'].keys() }}"  
  when:
     - "'pcheck_' in item"

- name: "{{ ansible_name_module }} | Print registered vars values"
  ansible.builtin.debug:
    var: hostvars['localhost'][item] 
  loop: "{{ hostvars['localhost'].keys() }}"  
  when:
     - "'pcheck_' in item"

- name: '{{ ansible_name_module }} | Logout of the current source cluster to kill any session'
  ansible.builtin.command: >
    {{ openshift_cli }} logout \
      --insecure-skip-tls-verify=true -s {{ restore_dest_cluster_console_url }}:{{ restore_dest_cluster_console_port | d('6443', true) }}
  when:
    - not skip_api_login_logout is defined or not skip_api_login_logout | bool

