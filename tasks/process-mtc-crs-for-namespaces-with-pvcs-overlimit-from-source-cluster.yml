---
- name: '{{ ansible_name_module }} | set_fact | pvc_backup_staging_dir '
  ansible.builtin.set_fact:
    mtc_cr_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}"
  when:
    - not mtc_cr_backup_staging_dir is defined or not mtc_cr_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the pvc file download stagin dir exist '
  ansible.builtin.file:
    path: "{{ mtc_cr_backup_staging_dir }}"
    state: directory
    mode: 0777
  when:
    - not mtc_cr_backup_staging_dir is defined or not mtc_cr_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | download MTC CR manifests to S3 bucket '
  when:
    - retrieve_mtc_crs is defined
    - retrieve_mtc_crs | bool 
  block:
     #### if different bucket info is not provided the same bucket used for MTC is assumed to be the one hosting the over limit MTC CRs 
    - name: '{{ ansible_name_module }} | set_fact | mtc_cr_bucket_name'
      ansible.builtin.set_fact:
        mtc_cr_bucket_name: '{{ mig_cntl_storagerepo_bucket_name }}'
      when:
        - not mtc_cr_bucket_name is defined or  mtc_cr_bucket_name == ''

    - name: '{{ ansible_name_module }} | set_fact | mtc_cr_bucket_s3url'
      ansible.builtin.set_fact:
        mtc_cr_bucket_s3url: '{{ mig_cntl_storagerepo_s3endpoint_url }}'
      when:
        - not mtc_cr_bucket_s3url is defined or mtc_cr_bucket_s3url == ''

    - name: '{{ ansible_name_module }} | set_fact | mtc_cr_bucket_key'
      ansible.builtin.set_fact:
        mtc_cr_bucket_key: '{{ mig_cntl_storagerepo_bucket_access_key }}'
      when:
        - not mtc_cr_bucket_key is defined or mtc_cr_bucket_key == ''

    - name: '{{ ansible_name_module }} | set_fact | mtc_cr_bucket_secret'
      ansible.builtin.set_fact:
        mtc_cr_bucket_secret: '{{ mig_cntl_storagerepo_bucket_access_secret }}'
      when:
        - not mtc_cr_bucket_secret is defined or  mtc_cr_bucket_secret == ''

    - name: '{{ ansible_name_module }} | set_fact | mtc_cr_bucket_region'
      ansible.builtin.set_fact:
        mtc_cr_bucket_region: "{{ mig_cntl_storagerepo_bucket_region | default('us-east-1', true) }}"
      when:
        - not mtc_cr_bucket_region is defined or mtc_cr_bucket_region == ''

    - name: '{{ ansible_name_module }} | command:which | Check if aws cli is installed'
      ansible.builtin.shell: >
        which aws
      ignore_errors: yes
      register: aws_binary

    - name: '{{ ansible_name_module }} | assert | the AWS CLI binary is defined'
      ansible.builtin.assert:
        that:
          - aws_binary is defined
          - aws_binary.rc is defined
          - aws_binary.rc == 0
          - aws_binary.stdout is defined
          - aws_binary.stdout != ''
        msg: "The AWS CLI binary is required to download the MTC CR manifest to the S3 bucket "

    - name: '{{ ansible_name_module }} | set_fact | aws_cli '
      ansible.builtin.set_fact:
        aws_cli: '{{ aws_binary.stdout }}'

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print mtc_cr_bucket_key output '
      ansible.builtin.debug:
        var: mtc_cr_bucket_key 
        verbosity: 2

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print mtc_cr_bucket_secret output '
      ansible.builtin.debug:
        var: mtc_cr_bucket_secret
        verbosity: 2

    - name: '{{ ansible_name_module }} | command:shell | copy MTC CR manifest directory to S3 bucket'
      ansible.builtin.shell: >
        {{ aws_cli }} s3 sync --region {{ mtc_cr_bucket_region }} \ 
          s3://{{ mtc_cr_bucket_name }}/mtc-overlimit-cr-manifests/ \
           {{ mtc_cr_backup_staging_dir }}/ \
         --endpoint-url https://{{ mtc_cr_bucket_s3url }} --no-verify-ssl
      environment:
        AWS_ACCESS_KEY_ID: "{{ mtc_cr_bucket_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ mtc_cr_bucket_secret }}"
      register: manifests_uploaded

- name: '{{ ansible_name_module }} | stat | Check if MTC CRs dir exist'
  ansible.builtin.stat:
    path: "{{ mtc_cr_backup_staging_dir }}"
    get_checksum: false
  when:
    - mtc_cr_backup_staging_dir is defined
    - mtc_cr_backup_staging_dir != ""
  register: mtc_cr_backup_staging_dir_exists

- name: '{{ ansible_name_module }} | assert | the MTC CRs fr over limit pvc namespace exist'
  ansible.builtin.assert:
    that:
      - mtc_cr_backup_staging_dir_exists is defined
      - mtc_cr_backup_staging_dir_exists.stat is defined
      - mtc_cr_backup_staging_dir_exists.stat.exists is defined
      - mtc_cr_backup_staging_dir_exists.stat.exists | bool 
    msg: "The list of over limit MTC CRs need to exist to process them" 

- name: '{{ ansible_name_module }} | Apply MTC CR manifests '
  block:
    - name: '{{ ansible_name_module }} | find | Find all Mig Plan Manifests'
      ansible.builtin.find:
        path: "{{ mtc_cr_backup_staging_dir }}"
        recurse: yes
        patterns: '*-mtc-migration-plan-customresource.yml'
      register: mig_plan_manifests

    - name: '{{ ansible_name_module }} | set_fact | Mig Plan Manifest paths'
      ansible.builtin.set_fact:
        mig_plan_manifest_file_paths: "{{ mig_plan_manifests.files | map(attribute='path') | list }}"
      when:
        - mig_plan_manifests is defined
        - mig_plan_manifests.files is defined
        - mig_plan_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all Mig Plan Manifest paths output '
      ansible.builtin.debug:
        var: mig_plan_manifest_file_paths
        verbosity: 2
      when:
        - mig_plan_manifest_file_paths is defined
        - mig_plan_manifest_file_paths | length > 0

    - name: '{{ ansible_name_module }} | find | Find all Mig Migration CR manifests'
      ansible.builtin.find:
        path: "{{ mtc_cr_backup_staging_dir }}"
        recurse: yes
        patterns: '*-mtc-migration-migmigration-cr.yml'
      register: mig_migration_manifests

    - name: '{{ ansible_name_module }} | set_fact | Mig Migration CR manifests  paths'
      ansible.builtin.set_fact:
        mig_migration_manifest_file_paths: "{{ mig_migration_manifests.files | map(attribute='path') | list }}"
      when:
        - mig_migration_manifests is defined
        - mig_migration_manifests.files is defined
        - mig_migration_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all Mig Migration CR manifests paths output '
      ansible.builtin.debug:
        var: mig_migration_manifest_file_paths
        verbosity: 2
      when:
        - mig_migration_manifest_file_paths is defined
        - mig_migration_manifest_file_paths | length > 0

    - name: '{{ ansible_name_module }} | find | Find all Mig Analytic CR Manifests'
      ansible.builtin.find:
        path: "{{ mtc_cr_backup_staging_dir }}"
        recurse: yes
        patterns: '*-mtc-migration-mig-analytic.yml'
      register: mig_analytic_manifests

    - name: '{{ ansible_name_module }} | set_fact | Mig Analytic CR Manifest paths'
      ansible.builtin.set_fact:
        mig_analytic_manifest_file_paths: "{{ mig_analytic_manifests.files | map(attribute='path') | list }}"
      when:
        - mig_analytic_manifests is defined
        - mig_analytic_manifests.files is defined
        - mig_analytic_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | Mig Plan manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }}
      loop: "{{ mig_plan_manifest_file_paths }}"
      when:
        - mig_plan_manifest_file_paths is defined
        - mig_plan_manifest_file_paths | length > 0
      register: mig_plan_manifests_applied

    ### wait for Mig Plan to have a ready state before applying the other CRs
    - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
      ansible.builtin.wait_for:
        timeout: 5
      delegate_to: localhost
      loop: "{{ mig_migration_manifest_file_paths }}"
      loop_control:
        index_var: key_cnt
      when:
        - mig_plan_manifests_applied is defined
        - mig_plan_manifests_applied.results is defined
        - mig_plan_manifests_applied.results| length > 0 
        - mig_plan_manifests_applied.results[key_cnt] is defined 
        - not mig_plan_manifests_applied.results[key_cnt].skipped is defined or not mig_plan_manifests_applied.results[key_cnt].skipped | bool 

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | get migplan state'
      ansible.builtin.shell: >
        {{ openshift_cli }} get migplan {{ mig_cntl_migplan_name }} --no-headers -n openshift-migration | awk '{print $2}'
      loop: "{{ mig_plan_manifest_file_paths }}"
      ignore_errors: true
      vars:
        mig_cntl_migplan_name: "{{ (item | basename).split('-mtc-migration-plan-customresource')[0] }}"
      register: mig_plan_state

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | Mig Migration manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }}
      loop: "{{ mig_migration_manifest_file_paths }}"
      loop_control:
        index_var: key_cnt
      when:
        - mig_migration_manifest_file_paths is defined
        - mig_migration_manifest_file_paths | length > 0
        - mig_plan_state.results[key_cnt].stdout is defined
        - mig_plan_state.results[key_cnt].stdout | bool 
      register: mig_migration_manifests_applied

    - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
      ansible.builtin.wait_for:
        timeout: 10
      delegate_to: localhost
      loop: "{{ mig_migration_manifest_file_paths }}"
      loop_control:
        index_var: key_cnt
      when:
        - mig_migration_manifests_applied is defined
        - mig_migration_manifests_applied.results is defined
        - mig_migration_manifests_applied.results| length > 0 
        - mig_migration_manifests_applied.results[key_cnt] is defined 
        - not mig_migration_manifests_applied.results[key_cnt].skipped is defined or not mig_migration_manifests_applied.results[key_cnt].skipped | bool 

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | Mig Analytics manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }}
      loop: "{{ mig_analytic_manifest_file_paths }}"
      loop_control:
        index_var: key_cnt
      when:
        - mig_analytic_manifest_file_paths is defined
        - mig_analytic_manifest_file_paths | length > 0
        - mig_plan_state.results[key_cnt].stdout is defined
        - mig_plan_state.results[key_cnt].stdout | bool 
      register: mig_analytic_manifests_applied

