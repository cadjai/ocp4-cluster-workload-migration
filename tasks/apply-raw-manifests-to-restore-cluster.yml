---
- name: '{{ ansible_name_module }} | set_fact | manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests"
  when:
    - not manifest_backup_staging_dir is defined or not manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the manifest download staging dir exist '
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  loop:
    - "{{ manifest_backup_staging_dir }}"

- name: '{{ ansible_name_module }} | download raw manifests from S3 bucket '
  ansible.builtin.include_tasks: tasks/download-raw-manifests-from-s3-bucket.yml
  vars:
    raw_manifests_backup_staging_dir: "{{ manifest_backup_staging_dir }}"
  when:
    - download_manifests_from_s3 is defined
    - download_manifests_from_s3 | bool 

- name: '{{ ansible_name_module }} | stat | Check if Raw Manifests dir exist'
  ansible.builtin.stat:
    path: "{{ manifest_backup_staging_dir }}"
    get_checksum: false
  when:
    - manifest_backup_staging_dir is defined
    - manifest_backup_staging_dir != ""
  register: manifest_backup_staging_dir_exists

- name: '{{ ansible_name_module }} | assert | the Raw manifests  exist'
  ansible.builtin.assert:
    that:
      - manifest_backup_staging_dir_exists is defined
      - manifest_backup_staging_dir_exists.stat is defined
      - manifest_backup_staging_dir_exists.stat.exists is defined
      - manifest_backup_staging_dir_exists.stat.exists | bool
    msg: "The list of raw manifests need to exist to process them"

- name: '{{ ansible_name_module }} | Apply raw manifests '
  when:
    - auto_apply_raw_manifests is defined
    - auto_apply_raw_manifests | bool 
  block:
    - name: '{{ ansible_name_module }} | find | Find all workload files'
      ansible.builtin.find:
        path: "{{ manifest_backup_staging_dir }}"
        recurse: yes
        patterns: '*-manifest.yaml'
      register: wkl_manifests

    - name: '{{ ansible_name_module }} | set_fact | workload file paths'
      ansible.builtin.set_fact:
        wkl_manifest_file_paths: "{{ wkl_manifests.files | map(attribute='path') | list }}"
      when:
        - wkl_manifests is defined
        - wkl_manifests.files is defined
        - wkl_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all workload manifest paths output '
      ansible.builtin.debug:
        var: wkl_manifest_file_paths
        verbosity: 2
      when:
        - wkl_manifest_file_paths is defined
        - wkl_manifest_file_paths | length > 0 

    - name: '{{ ansible_name_module }} | find | Find all roles files'
      ansible.builtin.find:
        path: "{{ manifest_backup_staging_dir }}/roles"
        recurse: yes
        patterns: '*-usermgt.yaml'
      register: rb_manifests

    - name: '{{ ansible_name_module }} | set_fact | roles file paths'
      ansible.builtin.set_fact:
        rb_manifest_file_paths: "{{ rb_manifests.files | map(attribute='path') | list }}"
      when:
        - rb_manifests is defined
        - rb_manifests.files is defined
        - rb_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all role and rolebinding manifest paths output '
      ansible.builtin.debug:
        var: rb_manifest_file_paths
        verbosity: 2
      when:
        - rb_manifest_file_paths is defined
        - rb_manifest_file_paths | length > 0 

    - name: '{{ ansible_name_module }} | find | Find all pvs files'
      ansible.builtin.find:
        path: "{{ manifest_backup_staging_dir }}/pvs"
        recurse: yes
        patterns: '*-pv.yaml'
      register: pv_manifests

    - name: '{{ ansible_name_module }} | set_fact | pvs file paths'
      ansible.builtin.set_fact:
        pv_manifest_file_paths: "{{ pv_manifests.files | map(attribute='path') | list }}"
      when:
        - pv_manifests is defined
        - pv_manifests.files is defined
        - pv_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all pv manifest paths output '
      ansible.builtin.debug:
        var: pv_manifest_file_paths
        verbosity: 2
      when:
        - pv_manifest_file_paths is defined
        - pv_manifest_file_paths | length > 0 

    - name: '{{ ansible_name_module }} | find | Find all pvcs files'
      ansible.builtin.find:
        path: "{{ manifest_backup_staging_dir }}/pvs/pvcs"
        recurse: yes
        patterns: '*-pvc.yaml'
      register: pvc_manifests

    - name: '{{ ansible_name_module }} | set_fact | pvcs file paths'
      ansible.builtin.set_fact:
        pvc_manifest_file_paths: "{{ pvc_manifests.files | map(attribute='path') | list }}"
      when:
        - pvc_manifests is defined
        - pvc_manifests.files is defined
        - pvc_manifests.files | length > 0

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print all pvcs manifest paths output '
      ansible.builtin.debug:
        var: pvc_manifest_file_paths 
        verbosity: 2
      when:
        - pvc_manifest_file_paths is defined
        - pvc_manifest_file_paths | length > 0 

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | rb manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }} 
      loop: "{{ rb_manifest_file_paths }}"
      when:
        - apply_rb_manifests is defined
        - apply_rb_manifests | bool 
        - rb_manifest_file_paths is defined
        - rb_manifest_file_paths | length > 0 
      register: rb_manifests_applied

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | PV manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }} 
      loop: "{{ pv_manifest_file_paths }}"
      when:
        - apply_pv_manifests is defined
        - apply_pv_manifests | bool 
        - pv_manifest_file_paths is defined
        - pv_manifest_file_paths | length > 0 
      register: pv_manifests_applied

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | PVC manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }} 
      loop: "{{ pvc_manifest_file_paths }}"
      when:
        - apply_pvc_manifests is defined
        - apply_pvc_manifests | bool 
        - pv_manifest_file_paths is defined
        - pv_manifest_file_paths | length > 0 
      register: pvc_manifests_applied

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} apply  | workload manifests'
      ansible.builtin.shell: >
        {{ openshift_cli }} apply -f {{ item }} 
      loop: "{{ wkl_manifest_file_paths }}"
      when:
        - apply_wkl_manifests is defined
        - apply_wkl_manifests | bool 
        - wkl_manifest_file_paths is defined
        - wkl_manifest_file_paths | length > 0 
      register: pvc_manifests_applied
