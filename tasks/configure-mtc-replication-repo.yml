---
- name: '{{ ansible_name_module }} | assert | the bucketname is defined'
  ansible.builtin.assert:
    that:
      - mig_cntl_storagerepo_bucket_name is defined
      - mig_cntl_storagerepo_bucket_name != '' 
    msg: "The repository storage bucket name is required for the Mig Storgae Repo configuration"

- name: '{{ ansible_name_module }} | assert | the S3 endpoint is defined'
  ansible.builtin.assert:
    that:
      - mig_cntl_storagerepo_s3endpoint_url is defined
      - mig_cntl_storagerepo_s3endpoint_url != '' 
    msg: "The repository storage S3 URL endpoint is required for the Mig Storgae Repo configuration"

- name: '{{ ansible_name_module }} | assert | the bucket access key is defined'
  ansible.builtin.assert:
    that:
      - mig_cntl_storagerepo_bucket_access_key is defined
      - mig_cntl_storagerepo_bucket_access_key != '' 
    msg: "The repository storage bucket access key is required for the Mig Storgae Repo configuration"

- name: '{{ ansible_name_module }} | assert | the bucket access secret is defined'
  ansible.builtin.assert:
    that:
      - mig_cntl_storagerepo_bucket_access_secret is defined
      - mig_cntl_storagerepo_bucket_access_secret != '' 
    msg: "The repository storage bucket access secret is required for the Mig Storgae Repo configuration"

- name: '{{ ansible_name_module }} | set_fact |  mig_cntl_storagerepo_secret_name '
  ansible.builtin.set_fact:
    mig_cntl_storagerepo_secret_name: "{{ mig_cntl_storagerepo_name }}-secret"
  when:
    - not mig_cntl_storagerepo_secret_name is defined or mig_cntl_storagerepo_secret_name == ''

- name: '{{ ansible_name_module }} | set_fact |  mig_cntl_storagerepo_secret_ns '
  ansible.builtin.set_fact:
    mig_cntl_storagerepo_secret_ns: "openshift-config"
  when:
    - not mig_cntl_storagerepo_secret_ns is defined or mig_cntl_storagerepo_secret_ns == ''

- name: '{{ ansible_name_module }} | Get Existing Mig Storage Access secret'
  ansible.builtin.command: >
    {{ openshift_cli }} get secret {{ mig_cntl_storagerepo_secret_name }} -n {{ mig_cntl_storagerepo_secret_ns }}
  ignore_errors: yes
  register: mig_repo_access_secret_exist

- name: '{{ ansible_name_module }} | Delete Existing Mig Storage Access  secret'
  ansible.builtin.command: >
    {{ openshift_cli }} delete secret {{ mig_cntl_storagerepo_secret_name }} -n {{ mig_cntl_storagerepo_secret_ns }} 
  ignore_errors: yes
  when:
    - mig_repo_access_secret_exist.rc is defined
    - mig_repo_access_secret_exist.rc == 0
    - mig_repo_access_secret_exist.stdout is defined
    - mig_repo_access_secret_exist.stdout != '' 
    - mig_cntl_storagerepo_secret_name in mig_repo_access_secret_exist.stdout
  register: mig_repo_access_secret_delete

- name: '{{ ansible_name_module }} | create Mig Storage Access  secret'
  ansible.builtin.command: >
    {{ openshift_cli }} create secret generic {{ mig_cntl_storagerepo_secret_name }} \
      --from-literal=aws-access-key-id={{ mig_cntl_storagerepo_bucket_access_key }} \
      --from-literal=aws-secret-access-key={{ mig_cntl_storagerepo_bucket_access_secret }} \
       -n {{ mig_cntl_storagerepo_secret_ns }}
  register: mig_repo_access_secret_created

- name: '{{ ansible_name_module }} | template | Render MigStorage manifests '
  ansible.builtin.template:
    src: "templates/mtc-migration-storage-repository-customresource.yml.j2"
    dest: "{{ staging_dir | d('/tmp', true) }}/mtc-migration-storage-repository-customresource.yml"
    force: yes
  vars:
  register: mig_repo_manifest_copied

- name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create MigRepository'
  ansible.builtin.command: >
    {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/mtc-migration-storage-repository-customresource.yml
  when:
    - mig_repo_manifest_copied is defined
    - mig_repo_manifest_copied.dest is defined
    - mig_repo_manifest_copied.state is defined
    - "'file' in  mig_repo_manifest_copied.state"
  register: mig_repo_config_applied
