---
- name: Install Podman and required packages
  ansible.builtin.package:
    name:
      - podman
      - podman-plugins
      - systemd
      - libselinux-python3 
    state: present
  become: yes

- name: Create Podman network for HAProxy
  containers.podman.podman_network:
    name: "{{ podman_config.network_name }}"
    state: present
  become: yes
  #become: "{{ podman_config.systemd_user }}"
  #become_user: "{{ ansible_user if podman_config.systemd_user else omit }}"

- name: Create Quadlet directory
  ansible.builtin.file:
    path: "{{ podman_config.quadlet_path }}"
    state: directory
    mode: '0755'
  become: yes

- name: Generate HAProxy Quadlet container file
  ansible.builtin.template:
    src: haproxy-quadlet.container.j2
    dest: "{{ podman_config.quadlet_path }}/haproxy-blue-green.container"
    mode: '0644'
  become: yes
  notify:
    - reload systemd daemon
    - restart haproxy service

- name: Generate HAProxy Quadlet network file
  ansible.builtin.template:
    src: haproxy-quadlet.network.j2
    dest: "{{ podman_config.quadlet_path }}/{{ podman_config.network_name }}.network"
    mode: '0644'
  become: yes
  when:
    - not podman_config.network_config is defined or podman_config.network_config != "host"
  notify:
    - reload systemd daemon

- name: Pull HAProxy container image
  containers.podman.podman_image:
    name: "{{ haproxy.image }}"
    state: present
  become: yes
  #become: "{{ podman_config.systemd_user }}"
  #become_user: "{{ ansible_user if podman_config.systemd_user else omit }}"

- name: Reload systemd daemon to pick up Quadlet files
  ansible.builtin.systemd:
    daemon_reload: yes
  become: yes

- name: Start and enable HAProxy service
  ansible.builtin.systemd:
    name: haproxy-blue-green.service
    state: started
    enabled: yes
  become: yes

- name: Wait for HAProxy to start
  ansible.builtin.wait_for:
    port: "{{ haproxy.http_port }}"
    host: localhost
    delay: 5
    timeout: 60

- name: Check HAProxy stats page is accessible
  ansible.builtin.uri:
    url: "http://localhost:{{ haproxy.stats_port }}/stats"
    user: "{{ haproxy.stats_user if haproxy.stats_user is defined and haproxy.stats_password is defined else omit }}"
    password: "{{ haproxy.stats_password if haproxy.stats_user is defined and haproxy.stats_password is defined else omit }}"
    force_basic_auth: "{{ 'yes' if haproxy.stats_user is defined and haproxy.stats_password is defined else omit }}"
    method: GET
    status_code: 200
  retries: 5
  delay: 3 
