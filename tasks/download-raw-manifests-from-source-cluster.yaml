---
- name: '{{ ansible_name_module }} | set_fact | manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests" 
  when:
    - not manifest_backup_staging_dir is defined or not manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | set_fact | roles_manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    roles_manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests/roles" 
  when:
    - not roles_manifest_backup_staging_dir is defined or not roles_manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the manifests download staging dir exist '
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  loop:
    - "{{ manifest_backup_staging_dir }}"
    - "{{ roles_manifest_backup_staging_dir }}"

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | download all manifestss in cluster '
  ansible.builtin.shell: >
    {{ openshift_cli }} get dc,deployments,statefulsets,daemonsets,cronjobs,secrets,configmaps,services,routes,ingress,networkpolicies,buildconfigs,imagestreams -n {{ item }}  -o yaml --show-managed-fields=false >  {{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ item }}-manifest.yaml
  loop: "{{ raw_manifests_namespace_list }}"
  ignore_errors: true
  register: manifests_downloaded

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | download all bound pvcs in cluster '
  ansible.builtin.shell: >
    {{ openshift_cli }} get roles,rolebindings,serviceaccounts,users,groups -n {{ item }}  -o yaml --show-managed-fields=false >  {{roles_manifest_backup_staging_dir }}/{{ backup_name }}-{{ item }}-usermgt.yaml
  loop: "{{ raw_manifests_namespace_list }}"
  ignore_errors: true
  register: usermgt_manifests_downloaded

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 1 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "creationTimestamp:"
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 2 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "resourceVersion: "
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 3 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "uid: "
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 4 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "lastScheduleTime: "
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 5 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "lastSuccessfulTime: "
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 6 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "status:"
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 7 of 7'
  ansible.builtin.lineinfile:
    path: "{{ manifest_file_path }}"
    regexp: "generation: "
    state: absent
  loop: "{{ manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    manifest_file_path: "{{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-manifest.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 1 of 3'
  ansible.builtin.lineinfile:
    path: "{{ usermgt_manifest_file_path }}"
    regexp: "creationTimestamp:"
    state: absent
  loop: "{{ usermgt_manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    usermgt_manifest_file_path: "{{ roles_manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-usermgt.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 2 of 3'
  ansible.builtin.lineinfile:
    path: "{{ usermgt_manifest_file_path }}"
    regexp: "resourceVersion: "
    state: absent
  loop: "{{ usermgt_manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    usermgt_manifest_file_path: "{{ roles_manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-usermgt.yaml"

- name:  '{{ ansible_name_module }} | Remove unecessary metadata from exported file 3 of 3'
  ansible.builtin.lineinfile:
    path: "{{ usermgt_manifest_file_path }}"
    regexp: "uid: "
    state: absent
  loop: "{{ usermgt_manifests_downloaded.results }}"
  loop_control:
    index_var: key_cnt
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0 
  vars:
    usermgt_manifest_file_path: "{{ roles_manifest_backup_staging_dir }}/{{ backup_name }}-{{ raw_manifests_namespace_list[key_cnt] }}-usermgt.yaml"

- name: '{{ ansible_name_module }} | Include Released PVs if applicable'
  when:
    - include_released_pvs is defined
    - include_released_pvs | bool
  block:
    - name: '{{ ansible_name_module }} | import_tasks | Import additional Retained PV download tasks'
      ansible.builtin.include_tasks: tasks/download-retained-volumes-manifests-from-source-cluster.yaml
