---
- name: '{{ ansible_name_module }} | set_fact | manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests" 
  when:
    - not manifest_backup_staging_dir is defined or not manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | set_fact | manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    ns_manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests/ns" 
  when:
    - not ns_manifest_backup_staging_dir is defined or not ns_manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | set_fact | roles_manifest_backup_staging_dir '
  ansible.builtin.set_fact:
    roles_manifest_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}/manifests/roles" 
  when:
    - not roles_manifest_backup_staging_dir is defined or not roles_manifest_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the manifests download staging dir exist '
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  loop:
    - "{{ manifest_backup_staging_dir }}"
    - "{{ ns_manifest_backup_staging_dir }}"
    - "{{ roles_manifest_backup_staging_dir }}"

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | download all manifestss in cluster '
  ansible.builtin.shell: >
    {{ openshift_cli }} get namespace {{ item }}  -o yaml --show-managed-fields=false >  {{ ns_manifest_backup_staging_dir }}/{{ backup_name }}-{{ item }}-manifest.yaml
  loop: "{{ raw_manifests_namespace_list }}"
  ignore_errors: true
  register: ns_manifests_downloaded

- name: '{{ ansible_name_module }} | import_tasks | Import additional raw namespace manifests cleanup tasks'
  ansible.builtin.include_tasks: tasks/download-and-clean-raw-namespaces.yml 

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | download all manifestss in cluster '
  ansible.builtin.shell: >
    {{ openshift_cli }} get dc,deployments,statefulsets,daemonsets,cronjobs,secrets,configmaps,services,routes,ingress,networkpolicies,buildconfigs,imagestreams -n {{ item }}  -o yaml --show-managed-fields=false >  {{ manifest_backup_staging_dir }}/{{ backup_name }}-{{ item }}-manifest.yaml
  loop: "{{ raw_manifests_namespace_list }}"
  ignore_errors: true
  register: manifests_downloaded

- name: '{{ ansible_name_module }} | import_tasks | Import additional raw workload manifests cleanup tasks'
  ansible.builtin.include_tasks: tasks/download-and-clean-raw-workload-manifests.yml 

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | download all bound pvcs in cluster '
  ansible.builtin.shell: >
    {{ openshift_cli }} get roles,rolebindings,serviceaccounts,users,groups -n {{ item }}  -o yaml --show-managed-fields=false >  {{roles_manifest_backup_staging_dir }}/{{ backup_name }}-{{ item }}-usermgt.yaml
  loop: "{{ raw_manifests_namespace_list }}"
  ignore_errors: true
  register: usermgt_manifests_downloaded

- name: '{{ ansible_name_module }} | import_tasks | Import additional raw user mgt manifests cleanup tasks'
  ansible.builtin.include_tasks: tasks/download-and-clean-raw-usermgt-manifests.yml 

- name: '{{ ansible_name_module }} | import_tasks | Import additional raw quotas manifests cleanup tasks'
  ansible.builtin.include_tasks: tasks/download-resource-quotas-manifests-from-source-cluster.yml 

- name: '{{ ansible_name_module }} | Include Released PVs if applicable'
  when:
    - include_released_pvs is defined
    - include_released_pvs | bool
  block:
    - name: '{{ ansible_name_module }} | import_tasks | Import additional Retained PV download tasks'
      ansible.builtin.include_tasks: tasks/download-retained-volumes-manifests-from-source-cluster.yml

- name: '{{ ansible_name_module }} | upload raw manifests to S3 bucket '
  block:
    - name: '{{ ansible_name_module }} | command:which | Check if aws cli is installed'
      ansible.builtin.shell: >
        which aws
      ignore_errors: yes
      register: aws_binary

    - name: '{{ ansible_name_module }} | assert | the AWS CLI binary is defined'
      ansible.builtin.assert:
        that:
          - aws_binary is defined
          - aws_binary.rc is defined
          - aws_binary.rc == 0
          - aws_binary.stdout is defined
          - aws_binary.stdout != ''
        msg: "The AWS CLI binary is required to upload the raw manifest to the S3 bucket "

    - name: '{{ ansible_name_module }} | set_fact | aws_cli '
      ansible.builtin.set_fact:
        aws_cli: '{{ aws_binary.stdout }}'

    - name: '{{ ansible_name_module }} | command:shell | copy raw manifest directory to S3 bucket'
      ansible.builtin.shell: >
        {{ aws_cli }} s3 --region {{ oadp_bucket_region }} sync {{ manifest_backup_staging_dir }}/ \
         s3://{{ oadp_s3_bucket }}/raw-manifests \
         --endpoint-url https://{{ oadp_s3url }} --no-verify-ssl
      environment:
        AWS_ACCESS_KEY_ID: "{{ oadp_bucket_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ oadp_bucket_access_secret }}"
      register: manifests_uploaded

