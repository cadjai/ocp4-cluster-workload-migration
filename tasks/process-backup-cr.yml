---
- name: '{{ ansible_name_module }} | template | Render oadp-backup CR'
  ansible.builtin.template:
    src: "templates/oadp-backup-cr.yaml.j2"
    dest: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-backup-cr.yaml"
    force: yes
  register: oadp_backup_cr_copied

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | oadp-backup CR '
  ansible.builtin.command: >
    {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-backup-cr.yaml -n {{ oadp_backup_ns }}
  failed_when:
    - oadp_backup_cr_applied.rc > 0
    - oadp_backup_cr_applied.stderr is defined
    - "not ' cannot get resource ' in oadp_backup_cr_applied.stderr"
  when:
    - oadp_storage_backup_location is defined
    - oadp_storage_backup_location != ''
  register: oadp_backup_cr_applied

- name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
  ansible.builtin.wait_for:
    timeout: 30
  delegate_to: localhost

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get |  backup CR'
  ansible.builtin.shell: >
    {{ openshift_cli }} get backup.velero.io -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}' | grep {{ backup_name }}
  register: backup_cr

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | Get backup CR status '
  ansible.builtin.command: >
    {{ openshift_cli }} get backup.velero.io {{ backup_name }} -n {{ oadp_backup_ns }} -o jsonpath='{.status.phase}'
  when:
    - backup_cr.rc is defined
    - backup_cr.rc == 0
    - backup_cr.stdout is defined
    - backup_cr.stdout != ''
  register: backup_cr_status
