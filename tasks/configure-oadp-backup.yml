---
- name: '{{ ansible_name_module }} | Ensure the OADP operator is installed'
  block:
    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get  | project {{ oadp_backup_ns }}'
      ansible.builtin.command: >
         {{ openshift_cli }} get project {{ oadp_backup_ns }}
      ignore_errors: yes
      register: oadp_ns_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get InstallPlan  --no-headers -n {{ oadp_backup_ns }} | awk '{print $1}'
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_ip_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get  po -n  {{ oadp_backup_ns }} --no-headers | awk '{print $1}' | grep openshift-adp-controller-manager
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_controller_out

    - name: '{{ ansible_name_module }} | Assert that the OADP controller is installed '
      assert:
        that:
          - oadp_ip_out.rc is defined and oadp_ip_out.rc == 0
          - oadp_ip_out.stdout is defined and oadp_ip_out.stdout != ''
          - oadp_controller_out.rc is defined and oadp_controller_out.rc == 0
        msg: " the OADP must be installed before running this playbook"

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | DPA CR '
  ansible.builtin.shell: >
    {{ openshift_cli }} get dataprotectionapplication.oadp.openshift.io -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}'
  ignore_errors: true
  register: oadp_dpa_out

###  Configure ODP DPA
- name: '{{ ansible_name_module }} | import_tasks | Import additional DPA processing tasks'
  ansible.builtin.include_tasks: configure-oadp-dpa.yml 
  vars:
    add_dpa: "true"
  when:
    - (override_dpa is defined and override_dpa | bool) or (oadp_dpa_out.stdout is defined and oadp_dpa_out.stdout == '') 

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR '
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}'
  register: oadp_storage_backup_location_out

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR phase'
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io {{ oadp_storage_backup_location_out.stdout }} -n {{ oadp_backup_ns }} -ojsonpath='{.status.phase}{"\n"}' 
  when:
    - oadp_storage_backup_location_out.stdout is defined
    - oadp_storage_backup_location_out.stdout != ''
  register: oadp_bsl_phase_out

- name: '{{ ansible_name_module }} | assert | the Backup Storage Location'
  ansible.builtin.assert:
    that:
      - oadp_bsl_phase_out is defined
      - oadp_bsl_phase_out.stdout is defined
      - oadp_bsl_phase_out.stdout != '' 
      - "'Available' in oadp_bsl_phase_out.stdout" 
    msg: "The Backup Storage Location has to exist with Available state to run backups "

- name: '{{ ansible_name_module }} | set_fact | oadp_storage_backup_location '
  ansible.builtin.set_fact:
    oadp_storage_backup_location: "{{ oadp_storage_backup_location_out.stdout }}"
  when:
    - oadp_storage_backup_location_out.stdout is defined
    - oadp_storage_backup_location_out.stdout != ''
    - oadp_bsl_phase_out is defined
    - oadp_bsl_phase_out.stdout is defined
    - oadp_bsl_phase_out.stdout != ''
    - "'Available' in oadp_bsl_phase_out.stdout"
      
- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR '
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}'
  register: oadp_storage_backup_location_out

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR phase'
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io {{ oadp_storage_backup_location_out.stdout }} -n {{ oadp_backup_ns }} -ojsonpath='{.status.phase}{"\n"}' 
  when:
    - oadp_storage_backup_location_out.stdout is defined
    - oadp_storage_backup_location_out.stdout != ''
  register: oadp_bsl_phase_out

- name: '{{ ansible_name_module }} | assert | the Backup Storage Location'
  ansible.builtin.assert:
    that:
      - oadp_bsl_phase_out is defined
      - oadp_bsl_phase_out.stdout is defined
      - oadp_bsl_phase_out.stdout != '' 
      - "'Available' in oadp_bsl_phase_out.stdout" 
    msg: "The Backup Storage Location has to exist with Available state to run backups "

- name: '{{ ansible_name_module }} | set_fact | oadp_storage_backup_location '
  ansible.builtin.set_fact:
    oadp_storage_backup_location: "{{ oadp_storage_backup_location_out.stdout }}"
  when:
    - oadp_storage_backup_location_out.stdout is defined
    - oadp_storage_backup_location_out.stdout != ''
    - oadp_bsl_phase_out is defined
    - oadp_bsl_phase_out.stdout is defined
    - oadp_bsl_phase_out.stdout != ''
    - "'Available' in oadp_bsl_phase_out.stdout"

- name: '{{ ansible_name_module }} | Process Namespace to include '
  when:
    - force_whole_cluster_backup is defined 
    - force_whole_cluster_backup | bool
  block:
    - name: '{{ ansible_name_module }} | import_tasks | Import Backup Source Cluster NS retrieval tasks'
      ansible.builtin.include_tasks: tasks/retrieve-namespacelist-from-source-cluster.yml
      when:
        - not namespaces_to_backup is defined or namespaces_to_backup | length == 0

- name: '{{ ansible_name_module }} | set_fact | set updated_namespaces_to_backup'
  ansible.builtin.set_fact:
    updated_namespaces_to_backup: '{{ namespaces_to_backup if namespaces_to_backup is defined and namespaces_to_backup | length > 0 else namespace_list_yaml }}'

### For OADP with CSI snapshot and data mover it is best to only backup NS with bound persistence
## So the process below will only include NS with bound PVCs. If all is needed then provide the override togggle
- name: '{{ ansible_name_module }} | Process Namespace to include '
  when:
    - not force_whole_cluster_backup is defined or not force_whole_cluster_backup | bool
  block:
    - name: '{{ ansible_name_module }} | import_tasks | Import Source Cluster Namespace List retrievl additional tasks'
      ansible.builtin.import_tasks: tasks/retrieve-namespace-with-pvcs-list-from-oadp-source-cluster.yml

    - name: '{{ ansible_name_module }} | set_fact | set updated_namespaces_to_backup'
      ansible.builtin.set_fact:
        updated_namespaces_to_backup: '{{ filtered_namespace_with_pvcs_yaml }}'

    - name: '{{ ansible_name_module }} | set_fact | set updated_namespaces_excluded_from_backup'
      ansible.builtin.set_fact:
        updated_namespaces_excluded_from_backup: '{{ namespace_list_yaml | symmetric_difference(updated_namespaces_to_backup) }}'

- name: '{{ ansible_name_module }} | Add Source cluster to MTC '
  when:
    - add_backup is defined 
    - add_backup | bool 
  block:
    - name: '{{ ansible_name_module }} | Retrieve velero info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get pod --no-headers -n {{ oadp_backup_ns }} | grep velero | awk '{print $1}'
      register: velero_po_retrieved

    - name: '{{ ansible_name_module }} | Retrieve velero pod phase '
      ansible.builtin.shell: >
        {{ openshift_cli }} get pod {{ velero_po_retrieved.stdout }} -n {{ oadp_backup_ns }}  -ojsonpath='{.status.phase}{"\n"}'
      when:
        - velero_po_retrieved is defined
        - velero_po_retrieved.rc is defined
        - velero_po_retrieved.rc == 0
        - velero_po_retrieved.stdout is defined
        - velero_po_retrieved.stdout != ''
      register: velero_po_phase_retrieved

    - name: '{{ ansible_name_module }} | Assert that the velero pod is running'
      assert:
        that:
          - velero_po_phase_retrieved.rc is defined and oadp_ip_out.rc == 0
          - velero_po_phase_retrieved.stdout is defined and oadp_ip_out.stdout != ''
          - "'Running' in velero_po_phase_retrieved.stdout" 
        msg: " the velero pod must be running before running this playbook"


    - name: '{{ ansible_name_module }} | set_fact | set backup_start_time'
      ansible.builtin.set_fact:
        backup_start_time: '{{ ansible_date_time.minute | int }}'

        ###  Porcess backup per namespace'
    - name: '{{ ansible_name_module }} | import_tasks | Import additional backup processing tasks'
      ansible.builtin.include_tasks: process-backup.yml 
      loop: "{{ updated_namespaces_to_backup }}"
      loop_control:
        index_var: key_cnt
      vars:
        backup_name: "{{ default_backup_name }}-{{ item }}"
        namespace_list: '{{ [item] }}'
        add_oadp_schedule: '{{ use_oadp_schedule_cr if use_oadp_schedule_cr is defined and use_oadp_schedule_cr | bool else "false" }}'
        oadp_cron_schedule_expression: '{{ backup_start_time + (key_cnt + 1)*5 }} {{ ansible_date_time.hour }} {{ ansible_date_time.day}} {{ ansible_date_time.month }} {{ ansible_date_time.weekday_number }}' 
        oadp_storage_backup_location: "{{ oadp_storage_backup_location_out.stdout }}"
      when:
        - process_backup_per_namespace is defined
        - process_backup_per_namespace | bool
      register: all_backup_processed

        ###  Process raw manifests backup per namespace'
    - name: '{{ ansible_name_module }} | import_tasks | Import additional backup processing tasks'
      ansible.builtin.include_tasks: tasks/download-raw-manifests-from-source-cluster.yaml 
      vars:
        raw_manifests_namespace_list: "{{ updated_namespaces_excluded_from_backup }}"
        backup_name: "{{ default_backup_name }}"
      when:
        - process_backup_per_namespace is defined
        - process_backup_per_namespace | bool
        - updated_namespaces_excluded_from_backup is defined
        - updated_namespaces_excluded_from_backup | length > 0
      register: all_backup_processed

        ### Porcess backup for all namespaces '
    - name: '{{ ansible_name_module }} | import_tasks | Import additional backup processing tasks'
      ansible.builtin.include_tasks: process-backup.yml 
      vars:
        backup_name: "{{ default_backup_name }}"
        namespace_list: "{{ updated_namespaces_to_backup }}"
        add_oadp_schedule: '{{ use_oadp_schedule_cr if use_oadp_schedule_cr is defined and use_oadp_schedule_cr | bool else "false" }}'
        oadp_cron_schedule_expression: '{{ backup_start_time + 5 }} {{ ansible_date_time.hour }} {{ ansible_date_time.day}} {{ ansible_date_time.month }} {{ ansible_date_time.weekday_number }}' 
        oadp_storage_backup_location: "{{ oadp_storage_backup_location_out.stdout }}"
      when:
        - not process_backup_per_namespace is defined or not process_backup_per_namespace | bool
      register: backup_bundle_processed

