---
- name: '{{ ansible_name_module }} | Ensure the OADP operator is installed'
  block:
    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get  | project {{ oadp_backup_ns }}'
      ansible.builtin.command: >
         {{ openshift_cli }} get project {{ oadp_backup_ns }}
      ignore_errors: yes
      register: oadp_ns_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get InstallPlan  --no-headers -n {{ oadp_backup_ns }} | awk '{print $1}'
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_ip_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get  po -n  {{ oadp_backup_ns }} --no-headers | awk '{print $1}' | grep openshift-adp-controller-manager
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_controller_out

    - assert:
        that:
          - oadp_ip_out.rc is defined and oadp_ip_out.rc == 0
          - oadp_ip_out.stdout is defined and oadp_ip_out.stdout != ''
          - oadp_controller_out.rc is defined and oadp_controller_out.rc == 0
        msg: " the OADP must be installed before running this playbook"

- name: '{{ ansible_name_module }} | Configure ODP DPA'
  block:
    - name: '{{ ansible_name_module }} | assert | the bucketname is defined'
      ansible.builtin.assert:
        that:
          - oadp_s3_bucket is defined
          - oadp_s3_bucket != '' 
        msg: "The repository storage bucket name is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the S3 endpoint is defined'
      ansible.builtin.assert:
        that:
          - oadp_s3url is defined
          - oadp_s3url != '' 
        msg: "The repository storage S3 URL endpoint is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the bucket access key is defined'
      ansible.builtin.assert:
        that:
          - oadp_bucket_access_key is defined
          - oadp_bucket_access_key != '' 
        msg: "The repository storage bucket access key is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the bucket access secret is defined'
      ansible.builtin.assert:
        that:
          - oadp_bucket_access_secret is defined
          - oadp_bucket_access_secret != '' 
        msg: "The repository storage bucket access secret is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | template | Render cloud-credentials'
      ansible.builtin.template:
        src: "templates/credentials-cloud.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-cloud-credentials"
        force: yes
      vars:
        aws_access_key: '{{ oadp_bucket_access_key }}'
        aws_access_secret: '{{ oadp_bucket_access_secret }}'
      register: oadp_cloud_cred_config_copied

    - name: '{{ ansible_name_module }} | retrieve and set openshift service ca cert on DPA OCP CA cert not provided'
      when:
        - add_odf_ca_cert is defined 
        - add_odf_ca_cert | bool 
        - not odf_ca_cert_b64 is defined
      block:
        - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | retrieve ocp svc ca'
          ansible.builtin.shell: >
            {{ openshift_cli }} get cm openshift-service-ca.crt  -n {{ oadp_backup_ns }} -o jsonpath='{.data.service-ca\.crt}' | base64 -w0; echo 
          register: ocp_svc_cert_b64_out
        - name: '{{ ansible_name_module }} | set_fact | backup_name '
          ansible.builtin.set_fact:
            odf_ca_cert_b64: "{{ ocp_svc_cert_b64_out.stdout }}"
          when:
            - ocp_svc_cert_b64_out is defined
            - ocp_svc_cert_b64_out.stdout is defined
            - ocp_svc_cert_b64_out.stdout != '' 

    - name: '{{ ansible_name_module }} | template | Render oadp-dataprotectionapplication CR'
      ansible.builtin.template:
        src: "templates/oadp-dataprotectionapplication-cr.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-dataprotectionapplication-cr.yaml"
        force: yes
      vars:
        s3url: '{{ oadp_s3url }}'
        bucket_name: '{{ oadp_s3_bucket }}'
        backup_prefix: '{{ oadp_backup_prefix }}'
        bucket_region: '{{ oadp_bucket_region }}'
      register: oadp_dpa_manifest_copied

    - name: '{{ ansible_name_module }} | set_fact |  oadp_bucket_secret_file '
      ansible.builtin.set_fact:
        oadp_bucket_secret_file: '{{ oadp_cloud_cred_config_copied.dest }}'
      when:
        - oadp_cloud_cred_config_copied is defined
        - oadp_cloud_cred_config_copied.dest is defined
        - oadp_cloud_cred_config_copied.dest != ""

    - name: '{{ ansible_name_module }} | set_fact |  oadp_bucket_secret_name '
      ansible.builtin.set_fact:
        oadp_bucket_secret_name: 'cloud-credentials'
      when:
        - not oadp_bucket_secret_name is defined or oadp_bucket_secret_name == ''

    - name: '{{ ansible_name_module }} | Get Existing Mig Storage Access secret'
      ansible.builtin.command: >
        {{ openshift_cli }} get secret {{ oadp_bucket_secret_name }} -n {{ oadp_backup_ns }}
      ignore_errors: yes
      register: oadp_bucket_secret_exist

    - name: '{{ ansible_name_module }} | Delete Existing Mig Storage Access  secret'
      ansible.builtin.command: >
        {{ openshift_cli }} delete secret {{ oadp_bucket_secret_name }} -n {{ oadp_backup_ns }} 
      ignore_errors: yes
      when:
        - oadp_bucket_secret_exist.rc is defined
        - oadp_bucket_secret_exist.rc == 0
        - oadp_bucket_secret_exist.stdout is defined
        - oadp_bucket_secret_exist.stdout != '' 
        - oadp_bucket_secret_name in oadp_bucket_secret_exist.stdout
      register: oadp_bucket_secret_delete

    - name: '{{ ansible_name_module }} | create Mig Storage Access  secret'
      ansible.builtin.command: >
        {{ openshift_cli }} create secret generic {{ oadp_bucket_secret_name }} \
          --from-file=cloud={{ oadp_bucket_secret_file }} \
           -n {{ oadp_backup_ns }}
      register: oadp_bucket_secret_created

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create OADP DPA'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-dataprotectionapplication-cr.yaml 
      when:
        - oadp_dpa_manifest_copied is defined
        - oadp_dpa_manifest_copied.dest is defined
        - oadp_dpa_manifest_copied.state is defined
        - "'file' in oadp_dpa_manifest_copied.state"
      register: oadp_dpa_config_applied

    - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
      ansible.builtin.wait_for:
        timeout: 60
      delegate_to: localhost

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR '
      ansible.builtin.shell: >
        {{ openshift_cli }} get backupstoragelocations -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}'
      register: oadp_storage_backup_location_out

    - name: '{{ ansible_name_module }} | set_fact | oadp_storage_backup_location '
      ansible.builtin.set_fact:
        oadp_storage_backup_location: "{{ oadp_storage_backup_location_out.stdout }}"
      when:
        - oadp_storage_backup_location_out.stdout is defined
        - oadp_storage_backup_location_out.stdout != ''

- name: '{{ ansible_name_module }} | Add Source cluster to MTC '
  when:
    - add_backup is defined 
    - add_backup | bool 
  block:
    - name: '{{ ansible_name_module }} | template | Render oadp-schedule CR'
      ansible.builtin.template:
        src: "templates/oadp-schedule-cr.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-schedule-cr.yaml"
        force: yes
      when:
        - add_oadp_schedule is defined
        - add_oadp_schedule | bool 
      register: oadp_schedule_cr_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | oadp-schedule CR '
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-schedule-cr.yaml -n {{ oadp_backup_ns }}
      when:
        - add_oadp_schedule is defined
        - add_oadp_schedule | bool 
        - oadp_storage_backup_location_out.stdout is defined
        - oadp_storage_backup_location_out.stdout != ''
      register: oadp_schedule_cr_applied

    - name: '{{ ansible_name_module }} | template | Render oadp-backup CR'
      ansible.builtin.template:
        src: "templates/oadp-backup-cr.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-backup-cr.yaml"
        force: yes
      register: oadp_backup_cr_copied

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} apply | oadp-backup CR '
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ backup_name }}-oadp-backup-cr.yaml -n {{ oadp_backup_ns }}
      when:
        - oadp_storage_backup_location_out.stdout is defined
        - oadp_storage_backup_location_out.stdout != ''
      register: oadp_backup_cr_applied

    - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
      ansible.builtin.wait_for:
        timeout: 60
      delegate_to: localhost

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get |  backup CR'
      ansible.builtin.shell: >
        {{ openshift_cli }} get backup -n {{ oadp_backup_ns }} --no-headers | awk '{print $1}' | grep {{ backup_name }}
      register: backup_cr

    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get | Get backup CR status '
      ansible.builtin.command: >
        {{ openshift_cli }} get backup "{{ backup_cr.stdout }}" -n {{ oadp_backup_ns }} -o jsonpath='{.status.phase}'
      when:
        - backup_cr.rc is defined
        - backup_cr.rc == 0
        - backup_cr.stdout is defined
        - backup_cr.stdout != ''
      register: backup_cr_status
