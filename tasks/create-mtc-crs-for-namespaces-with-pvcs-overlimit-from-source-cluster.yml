---
- name: '{{ ansible_name_module }} | Authenticate with the API'
  ansible.builtin.command: >
    {{ openshift_cli }} login \
      --token {{ src_mtc_cluster_token }} \
      --insecure-skip-tls-verify=true {{ src_mtc_cluster_console_url }}:{{ src_mtc_cluster_console_port | d('6443', true) }}
  when:
    - not skip_api_login_logout is defined or not skip_api_login_logout | bool

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print first half of bound pvcs namespaces output '
  ansible.builtin.debug:
    var: namespaces_with_bound_pvcs_over_limit_list 
  when:
    - namespaces_with_bound_pvcs_over_limit_list is defined
    - namespaces_with_bound_pvcs_over_limit_list | length > 0

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print first half of bound pvcs namespaces output '
  ansible.builtin.debug:
    var: item
  loop: "{{ namespaces_with_bound_pvcs_over_limit_list }}"
  when:
    - namespaces_with_bound_pvcs_over_limit_list is defined
    - namespaces_with_bound_pvcs_over_limit_list | length > 0

- name: '{{ ansible_name_module }} | set_fact | create and empty merged_over_limit_namespace_with_pvc_list '
  ansible.builtin.set_fact:
    merged_over_limit_namespace_with_pvc_list: [] 

- name: '{{ ansible_name_module }} | process namespaces with overlimit pvc count'
  ansible.builtin.include_tasks: tasks/process-namespace-with-overlimit-pvc-count.yml
  loop: "{{ namespaces_with_bound_pvcs_over_limit_list }}"
  loop_control:
    loop_var: current_ns
  when:
    - namespaces_with_bound_pvcs_over_limit_list is defined
    - namespaces_with_bound_pvcs_over_limit_list | length > 0

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print merged_over_limit_namespace_with_pvc_list output '
  ansible.builtin.debug:
    msg: "The list of over_limit_namespaces_with_pvc_list is : {{ merged_over_limit_namespace_with_pvc_list }}"
    verbosity: 2
  when:
    - merged_over_limit_namespace_with_pvc_list is defined
    - merged_over_limit_namespace_with_pvc_list | length > 0 

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print merged_over_limit_namespace_with_pvc_list output '
  ansible.builtin.debug:
    var: item
    verbosity: 2
  loop: "{{ merged_over_limit_namespace_with_pvc_list }}"
  when:
    - merged_over_limit_namespace_with_pvc_list is defined
    - merged_over_limit_namespace_with_pvc_list | length > 0 

- name: '{{ ansible_name_module }} | set_fact | pvc_backup_staging_dir '
  ansible.builtin.set_fact:
    mtc_cr_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}"
  when:
    - not mtc_cr_backup_staging_dir is defined or not mtc_cr_backup_staging_dir != ''

- name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the pvc file download stagin dir exist '
  ansible.builtin.file:
    path: "{{ mtc_cr_backup_staging_dir }}"
    state: directory
    mode: 0777

### Process Mig plan by namespace
- name: '{{ ansible_name_module }} | Add Migration Plan Resources to MTC  '
  ansible.builtin.template:
    src: "templates/mtc-migration-plan-customresource.yml.j2"
    dest: "{{ mtc_cr_backup_staging_dir }}/{{ mig_cntl_migplan_name }}-mtc-migration-plan-customresource.yml"
    force: yes
  loop: "{{ merged_over_limit_namespace_with_pvc_list }}"
  vars:
    mig_cntl_migplan_name: "{{ default_mig_cntl_migplan_name }}-{{ item.name }}"
    namespace_list: '{{ [item.pvcs[0].metadata.namespace] }}'
    include_pvs: "true"
    ns_with_pvc_list: "{{ item.pvcs }}"
  when:
    - merged_over_limit_namespace_with_pvc_list is defined
    - merged_over_limit_namespace_with_pvc_list | length > 0 
  register: all_backup_processed

 ### Process Migration by namespace
- name: '{{ ansible_name_module }} | Add MigMigration Resources to MTC '
  ansible.builtin.template:
    src: "templates/mtc-migration-migmigration-customresource.yml.j2"
    dest: "{{ mtc_cr_backup_staging_dir }}/{{ mig_cntl_migplan_name }}-mtc-migration-migmigration-cr.yml"
    force: yes
  loop: "{{ merged_over_limit_namespace_with_pvc_list }}"
  vars:
    mig_cntl_migplan_name: "{{ default_mig_cntl_migplan_name }}-{{ item.name }}"
    mig_cntl_migration_name: "{{ default_mig_cntl_migplan_name }}-{{ item.name }}"
  when:
    - merged_over_limit_namespace_with_pvc_list is defined
    - merged_over_limit_namespace_with_pvc_list | length > 0 
  register: all_backup_processed

 ### Process Migration by namespace
- name: '{{ ansible_name_module }} | Add MigMigration Resources to MTC '
  ansible.builtin.include_tasks:  tasks/process-mtc-migration-cr.yml
  ansible.builtin.template:
    src: "templates/mtc-migration-mig-analytic.yml.j2"
    dest: "{{ mtc_cr_backup_staging_dir }}/{{ mig_cntl_migplan_name }}-mtc-migration-mig-analytic.yml"
    force: yes
  loop: "{{ merged_over_limit_namespace_with_pvc_list }}"
  vars:
    mig_cntl_migplan_name: "{{ default_mig_cntl_migplan_name }}-{{ item.name }}"
    mig_cntl_migration_name: "{{ default_mig_cntl_migplan_name }}-{{ item.name }}"
  when:
    - merged_over_limit_namespace_with_pvc_list is defined
    - merged_over_limit_namespace_with_pvc_list | length > 0 
  register: all_backup_processed

- name: '{{ ansible_name_module }} | upload over limit mtc CR manifests to S3 bucket '
  block:
    - name: '{{ ansible_name_module }} | command:which | Check if aws cli is installed'
      ansible.builtin.shell: >
        which aws
      ignore_errors: yes
      register: aws_binary

    - name: '{{ ansible_name_module }} | assert | the AWS CLI binary is defined'
      ansible.builtin.assert:
        that:
          - aws_binary is defined
          - aws_binary.rc is defined
          - aws_binary.rc == 0
          - aws_binary.stdout is defined
          - aws_binary.stdout != ''
        msg: "The AWS CLI binary is required to upload the MTC CR manifest to the S3 bucket "

    - name: '{{ ansible_name_module }} | set_fact | aws_cli '
      ansible.builtin.set_fact:
        aws_cli: '{{ aws_binary.stdout }}'

    - name: '{{ ansible_name_module }} | command:shell | copy MTC CR manifest directory to S3 bucket'
      ansible.builtin.shell: >
        {{ aws_cli }} s3 --region {{ mig_cntl_storagerepo_bucket_region | default('us-east-1', true) }} \ 
          sync {{ mtc_cr_backup_staging_dir }}/ \
         s3://{{ mig_cntl_storagerepo_bucket_name }}/mtc-overlimit-cr-manifests \
         --endpoint-url https://{{ mig_cntl_storagerepo_s3endpoint_url }} --no-verify-ssl
      environment:
        AWS_ACCESS_KEY_ID: "{{ mig_cntl_storagerepo_bucket_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ mig_cntl_storagerepo_bucket_access_secret }}"
      register: manifests_uploaded

- name: '{{ ansible_name_module }} | Logout of the current source cluster to kill any session'
  ansible.builtin.command: >
    {{ openshift_cli }} logout \
      --insecure-skip-tls-verify=true -s {{ src_mtc_cluster_console_url }}:{{ src_mtc_cluster_console_port | d('6443', true) }}
  when:
    - not skip_api_login_logout is defined or not skip_api_login_logout | bool

