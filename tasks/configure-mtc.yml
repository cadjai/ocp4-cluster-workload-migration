---
- name: '{{ ansible_name_module }} | Configure S3 Storage Repo for MTC '
  when:
    - add_replication_repo is defined 
    - add_replication_repo | bool 
    - mig_cntl_storagerepo_name is defined
    - mig_cntl_storagerepo_name != '' 
  block:
    - name: '{{ ansible_name_module }} | assert | the bucketname is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_storagerepo_bucket_name is defined
          - mig_cntl_storagerepo_bucket_name != '' 
        msg: "The repository storage bucket name is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the S3 endpoint is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_storagerepo_s3endpoint_url is defined
          - mig_cntl_storagerepo_s3endpoint_url != '' 
        msg: "The repository storage S3 URL endpoint is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the bucket access key is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_storagerepo_bucket_access_key is defined
          - mig_cntl_storagerepo_bucket_access_key != '' 
        msg: "The repository storage bucket access key is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | assert | the bucket access secret is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_storagerepo_bucket_access_secret is defined
          - mig_cntl_storagerepo_bucket_access_secret != '' 
        msg: "The repository storage bucket access secret is required for the Mig Storgae Repo configuration"

    - name: '{{ ansible_name_module }} | set_fact |  mig_cntl_storagerepo_secret_name '
      ansible.builtin.set_fact:
        mig_cntl_storagerepo_secret_name: "{{ mig_cntl_storagerepo_name }}-secret"
      when:
        - not mig_cntl_storagerepo_secret_name is defined or mig_cntl_storagerepo_secret_name == ''

    - name: '{{ ansible_name_module }} | set_fact |  mig_cntl_storagerepo_secret_ns '
      ansible.builtin.set_fact:
        mig_cntl_storagerepo_secret_ns: "openshift-config"
      when:
        - not mig_cntl_storagerepo_secret_ns is defined or mig_cntl_storagerepo_secret_ns == ''

    - name: '{{ ansible_name_module }} | Get Existing Mig Storage Access secret'
      ansible.builtin.command: >
        {{ openshift_cli }} get secret {{ mig_cntl_storagerepo_secret_name }} -n {{ mig_cntl_storagerepo_secret_ns }}
      ignore_errors: yes
      register: mig_repo_access_secret_exist

    - name: '{{ ansible_name_module }} | Delete Existing Mig Storage Access  secret'
      ansible.builtin.command: >
        {{ openshift_cli }} delete secret {{ mig_cntl_storagerepo_secret_name }} -n {{ mig_cntl_storagerepo_secret_ns }} 
      ignore_errors: yes
      when:
        - mig_repo_access_secret_exist.rc is defined
        - mig_repo_access_secret_exist.rc == 0
        - mig_repo_access_secret_exist.stdout is defined
        - mig_repo_access_secret_exist.stdout != '' 
        - mig_cntl_storagerepo_secret_name in mig_repo_access_secret_exist.stdout
      register: mig_repo_access_secret_delete

    - name: '{{ ansible_name_module }} | create Mig Storage Access  secret'
      ansible.builtin.command: >
        {{ openshift_cli }} create secret generic {{ mig_cntl_storagerepo_secret_name }} \
          --from-literal=aws-access-key-id={{ mig_cntl_storagerepo_bucket_access_key }} \
          --from-literal=aws-secret-access-key={{ mig_cntl_storagerepo_bucket_access_secret }} \
           -n {{ mig_cntl_storagerepo_secret_ns }}
      register: mig_repo_access_secret_created

    - name: '{{ ansible_name_module }} | template | Render MigStorage manifests '
      ansible.builtin.template:
        src: "templates/mtc-migration-storage-repository-customresource.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/mtc-migration-storage-repository-customresource.yml"
        force: yes
      vars:
      register: mig_repo_manifest_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create MigRepository'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/mtc-migration-storage-repository-customresource.yml
      when:
        - mig_repo_manifest_copied is defined
        - mig_repo_manifest_copied.dest is defined
        - mig_repo_manifest_copied.state is defined
        - "'file' in  mig_repo_manifest_copied.state"
      register: mig_repo_config_applied

- name: '{{ ansible_name_module }} | Add Source cluster to MTC '
  when:
    - add_mig_cluster is defined 
    - add_mig_cluster | bool 
  block:
    - name: '{{ ansible_name_module }} | assert | the cluster name is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_cluster_name is defined
          - mig_cntl_cluster_name != '' 
        msg: "The remote cluster name is required to add the source cluster configuration"

    - name: '{{ ansible_name_module }} | assert | the cluster api url is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_cluster_api_url is defined
          - mig_cntl_cluster_api_url != '' 
        msg: "The remote cluster name is required to add the source cluster configuration"

    - name: '{{ ansible_name_module }} | assert | the source cluster token is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_cluster_sa_token is defined
          - mig_cntl_cluster_sa_token != '' 
        msg: "The remote cluster SA token is required to add the source cluster configuration"

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print SA Token output'
      ansible.builtin.debug:
        var: mig_cntl_cluster_sa_token
        verbosity: 2

    - name: '{{ ansible_name_module }} | set_fact |  mig_cntl_cluster_token_sa_secret_name '
      ansible.builtin.set_fact:
        mig_cntl_cluster_token_sa_secret_name: "{{ mig_cntl_cluster_name }}-secret"
      when:
        - not mig_cntl_cluster_token_sa_secret_name is defined or mig_cntl_cluster_token_sa_secret_name == ''

    - name: '{{ ansible_name_module }} | set_fact |  mig_cntl_cluster_token_sa_secret_ns '
      ansible.builtin.set_fact:
        mig_cntl_cluster_token_sa_secret_ns: "openshift-config"
      when:
        - not mig_cntl_cluster_token_sa_secret_ns is defined or mig_cntl_cluster_token_sa_secret_ns == ''

    - name: '{{ ansible_name_module }} | Get Existing Mig Cluster SA Token secret'
      ansible.builtin.command: >
        {{ openshift_cli }} get secret {{ mig_cntl_cluster_token_sa_secret_name }} -n {{ mig_cntl_cluster_token_sa_secret_ns }}
      ignore_errors: yes
      register: mig_cluster_sa_secret_exist

    - name: '{{ ansible_name_module }} | Delete Existing Mig  Cluster SA Token secret'
      ansible.builtin.command: >
        {{ openshift_cli }} delete secret {{ mig_cntl_cluster_token_sa_secret_name }} -n {{ mig_cntl_cluster_token_sa_secret_ns }} 
      ignore_errors: yes
      when:
        - mig_cluster_sa_secret_exist.rc is defined
        - mig_cluster_sa_secret_exist.rc == 0
        - mig_cluster_sa_secret_exist.stdout is defined
        - mig_cluster_sa_secret_exist.stdout != '' 
        - mig_cntl_cluster_token_sa_secret_name in mig_cluster_sa_secret_exist.stdout
      register: mig_cluster_sa_secret_delete

    - name: '{{ ansible_name_module }} | create Mig  Cluster SA Token  secret'
      ansible.builtin.command: >
        {{ openshift_cli }} create secret generic {{ mig_cntl_cluster_token_sa_secret_name }} \
          --from-literal=saToken={{ mig_cntl_cluster_sa_token }} \
           -n {{ mig_cntl_cluster_token_sa_secret_ns }}
      register: mig_cluster_sa_secret_created

    - name: '{{ ansible_name_module }} | template | Render MigCluster manifests '
      ansible.builtin.template:
        src: "templates/mtc-migration-sourcecluster-customresource.yml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/mtc-migration-sourcecluster-customresource.yml"
        force: yes
      register: mig_cluster_config_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create MigCluster'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/mtc-migration-sourcecluster-customresource.yml
      when:
        - mig_cluster_config_copied is defined
        - mig_cluster_config_copied.dest is defined
        - mig_cluster_config_copied.state is defined
        - "'file' in  mig_cluster_config_copied.state"
      register: mig_cluster_config_applied

    - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
      ansible.builtin.wait_for:
        timeout: 120
      delegate_to: localhost

- name: '{{ ansible_name_module }} | Add Migration Plan Resources to MTC '
  when:
    - add_migration_plan is defined 
    - add_migration_plan | bool 
  block:
    - name: '{{ ansible_name_module }} | assert | the Mig Plan destination host Name is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_desthost is defined
          - mig_cntl_desthost != '' 
        msg: "The MIG Plan destination host name is required to add the Mig Plan manifests"

    - name: '{{ ansible_name_module }} | assert | the Mig Plan Name is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_migplan_name is defined
          - mig_cntl_migplan_name != '' 
        msg: "The MIG Plan name is required to add the Mig Plan manifests"

    - name: '{{ ansible_name_module }} | assert | the Mig Migration Name is defined'
      ansible.builtin.assert:
        that:
          - mig_cntl_migration_name is defined
          - mig_cntl_migration_name != '' 
        msg: "The MIG migration name is required to add the Mig Plan manifests"

    - name: '{{ ansible_name_module }} | assert | the List of Namespace to migrate is defined'
      ansible.builtin.assert:
        that:
          - namespace_list is defined
          - namespace_list != ''
          - namespace_list | length > 0 
        msg: "The List of Namespaces to migrate is required to add the Mig Plan manifests"

    - name: '{{ ansible_name_module }} | template | Render Mig Plan manifests '
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ (item.split('/')[1]).split('.j2')[0] }}"
        force: yes
      loop:
        - templates/mtc-migration-plan-customresource.yml.j2
      register: mig_plan_configs_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print output rendered manifests'
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ mig_plan_configs_copied.results }}"
      when:
        - mig_plan_configs_copied is defined
        - mig_plan_configs_copied.results is defined
        - mig_plan_configs_copied.results | length > 0 
        - item.dest is defined
        - item.state is defined
        - "'file' in item.state"

    - name: '{{ ansible_name_module }} | create Mig Plan Manifests'
      when:
        - mig_plan_configs_copied is defined
        - mig_plan_configs_copied.results is defined
        - mig_plan_configs_copied.results | length > 0 
      block:
        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create Mig Plan Manifest'
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f {{ item.dest }}
          loop: "{{ mig_plan_configs_copied.results }}"
          when:
            - item.dest is defined
            - item.state is defined
            - "'file' in item.state"
            - "'plan' in item.dest"
          register: mig_plan_configs_applied

        - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
          ansible.builtin.wait_for:
            timeout: 90
          delegate_to: localhost

          ### wait for Mig Plan to have a ready state before applying the other CRs 
        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | get migplan state'
          ansible.builtin.shell: >
            {{ openshift_cli }} get migplan --no-headers $({{ openshift_cli }} get migplan --no-headers -n openshift-migration | awk '{print $1}') -n openshift-migration | awk '{print $2}'
          register: mig_plan_state
          until: 
            - mig_plan_state.rc is defined
            - mig_plan_state.rc == 0 
            - mig_plan_state.stdout is defined
            - mig_plan_state.stdout != '' 
            - mig_plan_state.stdout | bool 
          retries: 10
          delay: 30

- name: '{{ ansible_name_module }} | Perform Migration in MTC '
  when:
    - perform_migration is defined 
    - perform_migration | bool 
  block:
      ### Ensrue Migration Plan exist and in ready state before performing a migration 
    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} get | get migplan state'
      ansible.builtin.shell: >
        {{ openshift_cli }} get migplan --no-headers $({{ openshift_cli }} get migplan --no-headers -n openshift-migration | awk '{print $1}') -n openshift-migration | awk '{print $2}'
      register: mig_plan_state

    - name: '{{ ansible_name_module }} | assert | Ensure the MigPlan is defined and in ready state'
      ansible.builtin.assert:
        that:
          - mig_plan_state is defined
          - mig_plan_state.rc is defined
          - mig_plan_state.rc == 0 
          - mig_plan_state.stdout is defined
          - mig_plan_state.stdout != '' 
          - mig_plan_state.stdout | bool 
        msg: "The MigPlan CR is required and in Ready state to perfrom a migration "

    - name: '{{ ansible_name_module }} | template | Render Mig Plan manifests '
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ (item.split('/')[1]).split('.j2')[0] }}"
        force: yes
      loop:
        - templates/mtc-migration-migmigration-customresource.yml.j2
        - templates/mtc-migration-mig-analytic.yml.j2 
      register: mig_plan_crs_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.debug | Print output rendered manifests'
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ mig_plan_crs_copied.results }}"
      when:
        - mig_plan_crs_copied is defined
        - mig_plan_crs_copied.results is defined
        - mig_plan_crs_copied.results | length > 0 
        - item.dest is defined
        - item.state is defined
        - "'file' in item.state"

    - name: '{{ ansible_name_module }} | create Mig Plan related Manifests'
      when:
        - mig_plan_crs_copied is defined
        - mig_plan_crs_copied.results is defined
        - mig_plan_crs_copied.results | length > 0 
      block:
        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create Mig Migration Manifest'
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f {{ item.dest }}
          loop: "{{ mig_plan_crs_copied.results }}"
          when:
            - item.dest is defined
            - item.state is defined
            - "'file' in item.state"
            - "'migmigration' in item.dest"
          register: migmigration_configs_applied

        - name: '{{ ansible_name_module }} | wait_for | wait for CR to be ready'
          ansible.builtin.wait_for:
            timeout: 90
          delegate_to: localhost

        - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create Mig Analytic  Manifest'
          ansible.builtin.command: >
            {{ openshift_cli }} apply -f {{ item.dest }}
          loop: "{{ mig_plan_crs_copied.results }}"
          when:
            - item.dest is defined
            - item.state is defined
            - "'file' in item.state"
            - "'analytic' in item.dest"
          register: mig_anlytic_configs_applied

