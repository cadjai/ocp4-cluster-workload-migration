---
### Download raw manifest from S3 bucket '
#  Adding this here since it also contains the vars for backup to restore
- name: '{{ ansible_name_module }} | import_tasks | Import additional raw manifest download tasks'
  ansible.builtin.include_tasks: tasks/download-raw-manifests-from-s3-bucket.yml
  vars:
    backup_name: "{{ default_backup_name }}"

- name: '{{ ansible_name_module }} | Ensure the OADP operator is installed'
  block:
    - name: '{{ ansible_name_module }} | command:{{ openshift_cli }} get  | project {{ oadp_restore_ns }}'
      ansible.builtin.command: >
         {{ openshift_cli }} get project {{ oadp_restore_ns }}
      ignore_errors: yes
      register: oadp_ns_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get InstallPlan  --no-headers -n {{ oadp_restore_ns }} | awk '{print $1}'
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_ip_out

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get  | oadp IP'
      ansible.builtin.shell: >
        {{ openshift_cli }} get  po -n  {{ oadp_restore_ns }} --no-headers | awk '{print $1}' | grep openshift-adp-controller-manager
      ignore_errors: yes
      when:
        - oadp_ns_out.rc is defined
        - oadp_ns_out.rc == 0
        - oadp_ns_out.stdout is defined
        - oadp_ns_out.stdout != ''
      register: oadp_controller_out

    - assert:
        that:
          - oadp_ip_out.rc is defined and oadp_ip_out.rc == 0
          - oadp_ip_out.stdout is defined and oadp_ip_out.stdout != ''
          - oadp_controller_out.rc is defined and oadp_controller_out.rc == 0
        msg: " the OADP must be installed before running this playbook"

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | DPA CR '
  ansible.builtin.shell: >
    {{ openshift_cli }} get dataprotectionapplication.oadp.openshift.io -n {{ oadp_restore_ns }} --no-headers | awk '{print $1}'
  ignore_errors: true
  register: oadp_dpa_out

- name: '{{ ansible_name_module }} | Add SC change CM'
  when:
    - add_oadp_sc_change_cm is defined 
    - add_oadp_sc_change_cm | bool 
  block:
    - name: '{{ ansible_name_module }} | template | Render oadp-change-sc-cm.yaml.j2 CM'
      ansible.builtin.template:
        src: "templates/oadp-change-sc-cm.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ restore_name }}-oadp-change-sc-cm.yaml"
        force: yes
      register: oadp_sc_change_cm_manifest_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create OADP SC Change CM'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ staging_dir | d('/tmp', true) }}/{{ restore_name }}-oadp-change-sc-cm.yaml 
      when:
        - oadp_sc_change_cm_manifest_copied is defined
        - oadp_sc_change_cm_manifest_copied.dest is defined
        - oadp_sc_change_cm_manifest_copied.state is defined
        - "'file' in oadp_sc_change_cm_manifest_copied.state"
      register: oadp_sc_change_cm_manifest_applied

- name: '{{ ansible_name_module }} | Add gp2 sc pvc resource modifier CM'
  when:
    - add_oadp_gp2_sc_resource_modifier_cm is defined
    - add_oadp_gp2_sc_resource_modifier_cm | bool
  block:
    - name: '{{ ansible_name_module }} | template | Render oadp-change-sc-cm.yaml.j2 CM'
      ansible.builtin.template:
        src: "templates/oadp-restore-pg2-pvc-modifier-cm.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ restore_name }}-oadp-restore-pg2-pvc-modifier-cm.yaml"
        force: yes
      register: oadp_gp2_sc_rm_cm_manifest_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create OADP SC Change CM'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ oadp_gp2_sc_rm_cm_manifest_copied.dest }}
      when:
        - oadp_gp2_sc_rm_cm_manifest_copied is defined
        - oadp_gp2_sc_rm_cm_manifest_copied.dest is defined
        - oadp_gp2_sc_rm_cm_manifest_copied.state is defined
        - "'file' in oadp_gp2_sc_rm_cm_manifest_copied.state"
      register: oadp_gp2_sc_rm_cm_manifest_applied

- name: '{{ ansible_name_module }} | Add route host domain resource modifier CM'
  when:
    - add_oadp_route_host_resource_modifier_cm is defined
    - add_oadp_route_host_resource_modifier_cm | bool
  block:
    - name: '{{ ansible_name_module }} | template | Render oadp-change-sc-cm.yaml.j2 CM'
      ansible.builtin.template:
        src: "templates/oadp-restore-route-modifier-cm.yaml.j2"
        dest: "{{ staging_dir | d('/tmp', true) }}/{{ restore_name }}-oadp-restore-route-modifier-cm.yaml"
        force: yes
      register: oadp_rute_host_rm_cm_manifest_copied

    - name: '{{ ansible_name_module }} | ansible.builtin.command:{{ openshift_cli }} apply | create OADP Route Host Resource Modifier CM'
      ansible.builtin.command: >
        {{ openshift_cli }} apply -f {{ oadp_rute_host_rm_cm_manifest_copied.dest }}
      when:
        - oadp_rute_host_rm_cm_manifest_copied is defined
        - oadp_rute_host_rm_cm_manifest_copied.dest is defined
        - oadp_rute_host_rm_cm_manifest_copied.state is defined
        - "'file' in oadp_rute_host_rm_cm_manifest_copied.state"
      register: oadp_rute_host_rm_cm_manifest_applied

###  Configure ODP DPA
- name: '{{ ansible_name_module }} | import_tasks | Import additional DPA processing tasks'
  ansible.builtin.include_tasks: configure-oadp-dpa.yml
  vars:
    add_dpa: "true"
    backup_name: '{{ default_backup_name }}'
    s3url: '{{ oadp_s3url }}'
    bucket_name: '{{ oadp_s3_bucket }}'
    backup_prefix: '{{ oadp_backup_prefix }}'
    bucket_region: '{{ oadp_bucket_region }}'
  when:
    - (override_dpa is defined and override_dpa | bool) or (oadp_dpa_out.stdout is defined and oadp_dpa_out.stdout == '')

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR '
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io -n {{ oadp_restore_ns }} --no-headers | awk '{print $1}'
  register: oadp_storage_restore_location_out

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR phase'
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io {{ oadp_storage_restore_location_out.stdout }} -n {{ oadp_restore_ns }} -ojsonpath='{.status.phase}{"\n"}'
  when:
    - oadp_storage_restore_location_out.stdout is defined
    - oadp_storage_restore_location_out.stdout != ''
  register: oadp_bsl_phase_out

- name: '{{ ansible_name_module }} | assert | the Backup Storage Location'
  ansible.builtin.assert:
    that:
      - oadp_bsl_phase_out is defined
      - oadp_bsl_phase_out.stdout is defined
      - oadp_bsl_phase_out.stdout != ''
      - "'Available' in oadp_bsl_phase_out.stdout"
    msg: "The Backup Storage Location has to exist with Available state to run backups "

- name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR phase'
  ansible.builtin.shell: >
    {{ openshift_cli }} get backupstoragelocation.velero.io {{ oadp_storage_restore_location_out.stdout }} -n {{ oadp_restore_ns }} -ojsonpath='{.status.phase}{"\n"}'
  when:
    - oadp_storage_restore_location_out.stdout is defined
    - oadp_storage_restore_location_out.stdout != ''
  register: oadp_bsl_phase_out

- name: '{{ ansible_name_module }} | assert | the Backup Storage Location'
  ansible.builtin.assert:
    that:
      - oadp_bsl_phase_out is defined
      - oadp_bsl_phase_out.stdout is defined
      - oadp_bsl_phase_out.stdout != ''
      - "'Available' in oadp_bsl_phase_out.stdout"
    msg: "The Backup Storage Location has to exist with Available state to run backups "

- name: '{{ ansible_name_module }} | set_fact | oadp_storage_restore_location '
  ansible.builtin.set_fact:
    oadp_storage_restore_location: "{{ oadp_storage_restore_location_out.stdout }}"
  when:
    - oadp_storage_restore_location_out.stdout is defined
    - oadp_storage_restore_location_out.stdout != ''
    - oadp_bsl_phase_out is defined
    - oadp_bsl_phase_out.stdout is defined
    - oadp_bsl_phase_out.stdout != ''
    - "'Available' in oadp_bsl_phase_out.stdout"

- name: '{{ ansible_name_module }} | find | Find all ns restore var file files'
  ansible.builtin.find:
    path: "{{ raw_manifests_backup_staging_dir }}"
    recurse: yes
    patterns: 'oadp-restore-ns.yml'
  register: restore_ns_var

- name: '{{ ansible_name_module }} | set_fact | all ns restore var file file paths'
  ansible.builtin.set_fact:
    restore_ns_var_file_paths: "{{ restore_ns_var.files | map(attribute='path') | list }}"
  when:
    - restore_ns_var is defined
    - restore_ns_var.files is defined
    - restore_ns_var.files | length > 0

- name: '{{ ansible_name_module }} | write namespace list var to file '
  ansible.builtin.copy:
    src: "{{ restore_ns_var_file_paths[0] }}"
    dest: "{{ playbook_dir }}/../vars/{{ restore_ns_var_file_paths[0] | basename }}"
    force: true
  register: namespaces_to_restore_var_file_copied

- name: '{{ ansible_name_module }} | ansible.builtin.debug | Print list of backups to restore output '
  ansible.builtin.debug:
    var: backups_to_restore 
    verbosity: 2

- name: '{{ ansible_name_module }} | Configure OADP Restore  '
  when:
    - add_restore is defined 
    - add_restore | bool 
  block:
    - name: '{{ ansible_name_module }} | Retrieve velero info'
      ansible.builtin.shell: >
        {{ openshift_cli }} get pod --no-headers -n {{ oadp_restore_ns }} | grep velero | awk '{print $1}'
      register: velero_po_retrieved

    - name: '{{ ansible_name_module }} | Retrieve velero pod phase '
      ansible.builtin.shell: >
        {{ openshift_cli }} get pod {{ velero_po_retrieved.stdout }} -n {{ oadp_restore_ns }}  -ojsonpath='{.status.phase}{"\n"}'
      when:
        - velero_po_retrieved is defined
        - velero_po_retrieved.rc is defined
        - velero_po_retrieved.rc == 0
        - velero_po_retrieved.stdout is defined
        - velero_po_retrieved.stdout != ''
      register: velero_po_phase_retrieved

    - name: '{{ ansible_name_module }} | Assert that the velero pod is running'
      assert:
        that:
          - velero_po_phase_retrieved.rc is defined and oadp_ip_out.rc == 0
          - velero_po_phase_retrieved.stdout is defined and oadp_ip_out.stdout != ''
          - "'Running' in velero_po_phase_retrieved.stdout"
        msg: " the velero pod must be running before running this playbook"

    - name: '{{ ansible_name_module }} | shell:{{ openshift_cli }} get | backuplocation CR '
      ansible.builtin.shell: >
        {{ openshift_cli }} get backupstoragelocation.velero.io -n {{ oadp_restore_ns }} --no-headers | awk '{print $1}'
      register: oadp_storage_restore_location_out

    - name: '{{ ansible_name_module }} | set_fact | set restore_ttl_factor'
      ansible.builtin.set_fact:
        restore_ttl_factor: '3'
      when:
        - not restore_ttl_factor is defined or restore_ttl_factor == '' or restore_ttl_factor | int < 3

         ###  Porcess restore per namespace'
    - name: '{{ ansible_name_module }} | import_tasks | Import additional restore processing tasks'
      ansible.builtin.include_tasks: process-restore.yml
      loop: "{{ backups_to_restore }}"
      loop_control:
        index_var: key_cnt
      vars:
        backup_name: "{{ item }}"
        add_oadp_schedule: 'false'
        restore_name: "{{ item }}-restore"
        oadp_storage_backup_location: "{{ oadp_storage_restore_location_out.stdout }}"
        total_seconds: "{{ ((completed_oadp_backup_list[key_cnt].endtime | to_datetime('%Y-%m-%dT%H:%M:%SZ')) - (completed_oadp_backup_list[key_cnt].starttime | to_datetime('%Y-%m-%dT%H:%M:%SZ'))).total_seconds()}}"
        elapsed_hours: "{{ (((completed_oadp_backup_list[key_cnt].endtime | to_datetime('%Y-%m-%dT%H:%M:%SZ')) - (completed_oadp_backup_list[key_cnt].starttime | to_datetime('%Y-%m-%dT%H:%M:%SZ'))).total_seconds() x restore_ttl_factor / 3600) | int }}"
        elapsed_minutes: "{{ ((((completed_oadp_backup_list[key_cnt].endtime | to_datetime('%Y-%m-%dT%H:%M:%SZ')) - (completed_oadp_backup_list[key_cnt].starttime | to_datetime('%Y-%m-%dT%H:%M:%SZ'))).total_seconds() x restore_ttl_factor % 3600) / 60) | int }}"
        elapsed_seconds: "{{ ((completed_oadp_backup_list[key_cnt].endtime | to_datetime('%Y-%m-%dT%H:%M:%SZ')) - (completed_oadp_backup_list[key_cnt].starttime | to_datetime('%Y-%m-%dT%H:%M:%SZ'))).total_seconds() x restore_ttl_factor % 60 }}"
      when:
        - process_backup_per_namespace is defined
        - process_backup_per_namespace | bool
      register: all_restore_processed

        ### Porcess restore for all namespaces '
    - name: '{{ ansible_name_module }} | import_tasks | Import additional restore processing tasks'
      ansible.builtin.include_tasks: process-restore.yml
      vars:
        backup_name: "{{ default_backup_name }}"
        add_oadp_schedule: 'false'
        restore_name: "{{ default_backup_name }}-restore"
        oadp_storage_backup_location: "{{ oadp_storage_restore_location_out.stdout }}"
      when:
        - not process_backup_per_namespace is defined or not process_backup_per_namespace | bool
      register: restore_bundle_processed

    - name: '{{ ansible_name_module }} | set_fact | unset backups_to_restore '
      ansible.builtin.set_fact:
        backups_to_restore: [] 

