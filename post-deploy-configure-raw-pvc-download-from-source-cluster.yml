- name: ' Konductor | Provision UPI Infra | deploy-oadp-application-backup.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "deploy-oadp-application-backup"
    ansible_name_module: " Post Cluster Installation | Configure Cluster application backup Service | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/oadp-migration.yml'
  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve Infrastructure Name'
      ansible.builtin.command: >
        {{ openshift_cli }} get infrastructure cluster -o jsonpath='{.status.infrastructureName}{"\n"}'
      register: cluster_infra_name

    - name: '{{ ansible_name_module }} | set_fact | cluster_name '
      ansible.builtin.set_fact:
        cluster_name: "{{ cluster_infra_name.stdout }}"
      when:
        - cluster_infra_name.stdout is defined
        - cluster_infra_name.stdout != ''

    - name: '{{ ansible_name_module }} | Retrieve Infrastructure ID'
      ansible.builtin.command: >
        {{ openshift_cli }} get clusterversion version -o jsonpath='{.spec.clusterID}{"\n"}' 
      register: cluster_infra_id

    - name: '{{ ansible_name_module }} | set_fact | cluster_id '
      ansible.builtin.set_fact:
        cluster_id: "{{ cluster_infra_id.stdout }}"
      when:
        - cluster_infra_id.stdout is defined
        - cluster_infra_id.stdout != ''

    - name: '{{ ansible_name_module }} | set_fact | backup_name '
      ansible.builtin.set_fact:
        backup_name: "{{ backup_name_prefix_strg }}{{ cluster_name }}-bg-backup-{{ ansible_date_time.iso8601_basic_short.split('T')[0] }}"
      when:
        - not backup_name is defined or not backup_name != ''
      vars:
        backup_name_prefix_strg: "{{ (backup_name_prefix + '-') if backup_name_prefix is defined and backup_name_prefix != '' else '' }}"

    - name: '{{ ansible_name_module }} | set_fact | pvc_backup_staging_dir '
      ansible.builtin.set_fact:
        pvc_backup_staging_dir: "{{ staging_dir | d('/tmp', true) }}/{{ backup_name }}"
      when:
        - not pvc_backup_staging_dir is defined or not pvc_backup_staging_dir != ''

    - name: '{{ ansible_name_module }} | ansible.builtin.file | Ensure the pvc file download stagin dir exist '
      ansible.builtin.file:
        path: "{{ pvc_backup_staging_dir }}"
        state: directory
        mode: 0777

    - name: '{{ ansible_name_module }} | import_tasks | Import additional raw PVC Download tasks'
      ansible.builtin.import_tasks: tasks/download-raw-bound-pvcs-from-source-cluster.yaml 

