- name: ' Konductor | Provision UPI Infra | deploy-oadp-application-backup.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "deploy-oadp-application-backup"
    ansible_name_module: " Post Cluster Installation | Configure Cluster application backup Service | {{ module }}"
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
    - 'vars/oadp-migration.yml'
  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      block:
        - assert:
            that:
              - oadp_bucket_access_key is defined and oadp_bucket_access_key != ""
            msg: " the oadp_bucket_access_key must be set and valid "
        - assert:
            that:
              - oadp_bucket_access_secret is defined and oadp_bucket_access_secret != ""
            msg: " the oadp_bucket_access_secret must be set and valid "
        - assert:
            that:
              - oadp_s3url is defined and oadp_s3url != ""
            msg: " the oadp_s3url must be set and valid "

        - assert:
            that:
              - oadp_s3_bucket is defined and oadp_s3_bucket != ''
            msg: " the oadp_s3_bucket must be set to a valid S3 bucket name  "

    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies:
          - openshift
          - requests

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Retrieve Infrastructure Name'
      ansible.builtin.command: >
        {{ openshift_cli }} get infrastructure cluster -o jsonpath='{.status.infrastructureName}{"\n"}'
      register: cluster_infra_name

    - name: '{{ ansible_name_module }} | set_fact | cluster_name '
      ansible.builtin.set_fact:
        cluster_name: "{{ cluster_infra_name.stdout }}"
      when:
        - cluster_infra_name.stdout is defined
        - cluster_infra_name.stdout != ''

    - name: '{{ ansible_name_module }} | Retrieve Infrastructure ID'
      ansible.builtin.command: >
        {{ openshift_cli }} get clusterversion version -o jsonpath='{.spec.clusterID}{"\n"}' 
      register: cluster_infra_id

    - name: '{{ ansible_name_module }} | set_fact | cluster_id '
      ansible.builtin.set_fact:
        cluster_id: "{{ cluster_infra_id.stdout }}"
      when:
        - cluster_infra_id.stdout is defined
        - cluster_infra_id.stdout != ''

    - name: '{{ ansible_name_module }} | set_fact | backup_name '
      ansible.builtin.set_fact:
        backup_name: "{{ backup_name_prefix_strg }}{{ cluster_name }}-bg-backup-{{ ansible_date_time.iso8601_basic_short.split('T')[0] }}"
      when:
        - not backup_name is defined or not backup_name != ''
      vars:
        backup_name_prefix_strg: "{{ (backup_name_prefix + '-') if backup_name_prefix is defined and backup_name_prefix != '' else '' }}"

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP operator cleanup tasks'
      ansible.builtin.include_tasks: tasks/cleanup-previous-oadp-operator-install.yml
      loop: "{{ previous_oadp_namespace_list }}"
      when:
        - cleanup_previous_oadp_operator is defined
        - cleanup_previous_oadp_operator | bool 
        - previous_oadp_namespace_list is defined
        - previous_oadp_namespace_list | length > 0 
      vars:
        existing_oadp_backup_ns: "{{ item }}" 

    - name: '{{ ansible_name_module }} | import_tasks | Import additional targeted namespace processing tasks'
      ansible.builtin.include_tasks: tasks/process-targeted-namespace-list.yml 

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP exclusion tasks'
      ansible.builtin.include_tasks: tasks/process-oadp-exclusion-on-source-cluster.yml
      when:
        - not skip_oadp_exclusion is defined or not skip_oadp_exclusion | bool
      vars:
        namespace_list: "{{ updated_namespaces_to_backup }}"

    - name: '{{ ansible_name_module }} | import_tasks | Import additional MCP pause tasks'
      ansible.builtin.include_tasks: tasks/process-mcp-pausing-unpausing.yml
      when:
        - pause_mcp is defined
        - pause_mcp | bool 
      vars:
        pause_mcp: 'false'
        unpause_mcp: 'false'

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP operator install check tasks'
      ansible.builtin.import_tasks: tasks/ensure-oadp-operator-is-installed.yml

    - name: '{{ ansible_name_module }} | import_tasks | Import additional OADP operator config tasks'
      ansible.builtin.import_tasks: tasks/configure-oadp-backup.yml

    - name: '{{ ansible_name_module }} | Process Backup Complete state cron job '
      block:
        - name: '{{ ansible_name_module }} | set_fact |  backup_complete_state_config_cm_name'
          ansible.builtin.set_fact:
            backup_complete_state_config_cm_name: 'backup-complete-state-config-configmap'
          when:
            - not backup_complete_state_config_cm_name is defined or backup_complete_state_config_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | backup_complete_state_task_cm_name'
          ansible.builtin.set_fact:
            backup_complete_state_task_cm_name: 'backup-complete-state-tasks-configmap'
          when:
            - not backup_complete_state_task_cm_name is defined or backup_complete_state_task_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | backup_complete_state_playbook_cm_name'
          ansible.builtin.set_fact:
            backup_complete_state_playbook_cm_name: 'backup-complete-state-playbook-configmap'
          when:
            - not backup_complete_state_playbook_cm_name is defined or backup_complete_state_playbook_cm_name == ''

        - name: '{{ ansible_name_module }} | set_fact | backup_complete_state_task_file'
          ansible.builtin.set_fact:
            backup_complete_state_task_file: 'tasks/backup-crs-state.yml'
          when:
            - not backup_complete_state_task_file is defined or backup_complete_state_task_file == ''

        - name: '{{ ansible_name_module }} | set_fact | mcp_unpause_playbook_file'
          ansible.builtin.set_fact:
            mcp_unpause_task_file: 'tasks/process-mcp-pausing-unpausing.yml'
          when:
            - not mcp_unpause_playbook_file is defined or mcp_unpause_playbook_file == ''

        - name: '{{ ansible_name_module }} | set_fact | backup_complete_state_playbook_file'
          ansible.builtin.set_fact:
            backup_complete_state_playbook_file: 'files/backup-complete-state.yml'
          when:
            - not backup_complete_state_playbook_file is defined or backup_complete_state_playbook_file == ''

        - name: '{{ ansible_name_module }} | set_fact | staging_dir_in_pod'
          ansible.builtin.set_fact:
            staging_dir_in_pod: '/projects/files'
          when:
            - not staging_dir_in_pod is defined or staging_dir_in_pod == ''

        - name: '{{ ansible_name_module }} | set_fact | ocp_cli_path_in_pod'
          ansible.builtin.set_fact:
            ocp_cli_path_in_pod: '/usr/bin/oc'
          when:
            - not ocp_cli_path_in_pod is defined or ocp_cli_path_in_pod == ''

        - name: '{{ ansible_name_module }} | import_tasks | Import Backup complete state cronjob tasks'
          ansible.builtin.import_tasks: tasks/create-backup-complete-state-cronjob-resources.yml
          vars:
            unpause_mcp: 'false'
            backup_name: '{{ default_backup_name }}'
